// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: TIBasic.flex

package nl.petertillema.tibasic.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import nl.petertillema.tibasic.psi.TIBasicTypes;


class TIBasicLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\2\u0100\1\u0400\1\u0500\1\u0100"+
    "\5\u0600\1\u0700\1\u0800\1\u0900\6\u0100\1\u0a00\1\u0b00\1\u0c00"+
    "\1\u0d00\1\u0e00\1\u0f00\5\u0100\1\u1000\203\u0100\1\u0800\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\123\u0100\1\u0b00\4\u0100\1\u1500"+
    "\10\u0100\1\u1600\2\u0100\1\u1700\1\u1800\1\u1400\1\u0100\1\u0700"+
    "\1\u0100\1\u1900\1\u1600\1\u0a00\3\u0100\1\u1300\1\u1a00\114\u0100"+
    "\1\u1b00\1\u1300\150\u0100\1\u1c00\2\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\1\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\30"+
    "\1\32\1\0\1\33\1\34\1\35\2\0\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\0\1\71\1\72\1\73\1\0\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\u0264\0\1\132\260\0\1\133"+
    "\43\0\1\134\16\0\1\135\230\0\12\136\206\0\12\136"+
    "\306\0\12\136\234\0\12\136\166\0\12\136\140\0\12\136"+
    "\166\0\12\136\106\0\12\136\u0116\0\12\136\106\0\12\136"+
    "\u0146\0\12\136\46\0\12\136\u012c\0\12\136\200\0\12\136"+
    "\246\0\12\136\6\0\12\136\266\0\12\136\126\0\12\136"+
    "\206\0\12\136\6\0\12\136\300\0\1\137\u01b5\0\12\136"+
    "\46\0\12\136\306\0\12\136\26\0\12\136\126\0\12\136"+
    "\u0196\0\12\136\246\0\12\136\206\0\12\136\u012c\0\12\136"+
    "\200\0\12\136\74\0\12\136\220\0\12\136\166\0\12\136"+
    "\146\0\12\136\206\0\12\136\106\0\12\136\266\0\12\136"+
    "\361\0\1\140\63\0\1\140\u013e\0\62\136\100\0\12\136"+
    "\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\1\1\14\3\15\1\16"+
    "\1\17\1\20\1\21\31\22\1\23\1\24\1\25\24\1"+
    "\1\26\1\1\1\27\1\30\2\1\1\22\1\1\1\31"+
    "\2\32\1\33\1\31\1\34\1\0\1\35\1\15\1\36"+
    "\2\0\1\15\1\0\1\37\1\40\11\0\4\1\2\0"+
    "\4\1\3\0\4\1\3\0\11\1\1\0\1\41\6\1"+
    "\3\0\5\1\1\0\1\42\2\1\1\43\2\0\6\1"+
    "\2\0\3\1\1\0\2\1\1\0\3\1\2\0\12\1"+
    "\3\0\2\1\1\0\6\1\2\4\2\0\12\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\14\0\3\1\36\0"+
    "\20\1\1\0\2\1\2\0\10\1\1\44\4\1\6\0"+
    "\2\1\1\45\1\46\27\1\5\0\1\47\1\0\1\4"+
    "\3\0\1\50\20\0\1\51\3\1\3\0\6\1\2\0"+
    "\6\1\1\0\1\52\7\1\1\53\2\1\1\54\1\53"+
    "\3\1\1\0\3\1\1\0\1\55\2\1\3\0\1\52"+
    "\11\1\3\0\1\1\1\56\2\1\1\0\1\1\5\0"+
    "\3\1\1\4\4\1\1\0\3\1\1\0\11\1\1\0"+
    "\2\1\1\0\1\57\1\0\3\1\1\57\3\1\1\0"+
    "\3\1\1\53\7\1\2\0\12\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\16\0\2\1\2\0"+
    "\1\60\14\0\1\46\2\0\1\15\11\0\1\61\1\62"+
    "\1\63\1\64\1\65\1\0\1\1\1\66\10\1\1\44"+
    "\3\1\1\44\4\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\44\1\1\1\44\2\1\1\67\3\0\1\70\1\0"+
    "\6\1\1\0\12\1\1\0\1\1\1\71\1\1\5\0"+
    "\1\43\3\0\1\4\1\44\1\15\11\0\2\1\4\0"+
    "\5\1\2\0\2\1\5\0\5\1\1\0\4\1\1\53"+
    "\1\0\1\1\1\72\1\0\1\1\1\4\1\52\1\0"+
    "\2\53\1\0\1\73\6\1\1\74\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\4\0\3\1\2\0\1\1\1\0"+
    "\5\1\2\0\3\1\2\0\2\1\1\0\3\1\1\0"+
    "\2\1\1\0\3\1\1\0\5\1\1\75\1\1\1\75"+
    "\2\0\1\1\1\0\1\52\1\76\1\1\1\41\2\1"+
    "\1\0\2\1\2\0\1\1\14\0\2\1\20\0\1\77"+
    "\1\44\4\1\2\0\1\44\1\1\3\0\1\1\3\0"+
    "\1\1\4\0\1\1\1\0\2\1\2\0\3\1\1\0"+
    "\1\74\1\0\1\1\3\0\1\1\1\0\2\1\2\0"+
    "\2\1\2\0\1\100\1\101\1\43\12\0\2\1\2\0"+
    "\2\1\2\0\1\1\4\0\2\1\1\0\4\1\11\0"+
    "\1\1\1\0\1\1\1\53\2\1\2\0\1\1\4\0"+
    "\2\1\5\0\1\1\4\0\1\53\1\1\2\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\52"+
    "\3\1\1\0\1\1\2\0\1\53\1\0\1\1\1\102"+
    "\1\0\1\1\16\0\1\1\13\0\3\1\2\0\1\1"+
    "\1\0\1\1\4\0\1\1\4\0\1\1\2\0\3\1"+
    "\4\0\1\1\4\0\1\1\1\22\5\0\1\1\1\0"+
    "\1\103\1\43\10\0\1\1\3\0\2\1\4\0\1\1"+
    "\2\0\3\1\13\0\2\1\2\0\1\1\2\0\2\1"+
    "\12\0\1\104\1\0\1\1\2\0\1\1\3\0\1\1"+
    "\4\0\1\1\10\0\1\1\11\0\1\1\4\0\1\1"+
    "\4\0\2\1\2\0\1\1\4\0\1\1\1\43\13\0"+
    "\1\1\2\0\1\1\2\0\1\1\7\0\2\1\2\0"+
    "\1\1\11\0\1\1\2\0\1\1\23\0\1\1\3\0"+
    "\1\1\1\44\1\0\1\1\1\0\1\43\10\0\1\1"+
    "\2\0\1\1\3\0\1\1\15\0\1\1\23\0\1\1"+
    "\21\0\1\1\31\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\141\0\302\0\u0123\0\302\0\u0184\0\u01e5\0\302"+
    "\0\302\0\302\0\u0246\0\302\0\302\0\u02a7\0\u0308\0\u0369"+
    "\0\u03ca\0\u042b\0\u048c\0\302\0\u04ed\0\302\0\u054e\0\u05af"+
    "\0\u0610\0\u0671\0\u06d2\0\u0733\0\u0794\0\u07f5\0\u0856\0\u08b7"+
    "\0\u0918\0\u0979\0\u09da\0\u0a3b\0\u0a9c\0\u0afd\0\u0b5e\0\u0bbf"+
    "\0\u0c20\0\u0c81\0\u0ce2\0\u0d43\0\u0da4\0\u0e05\0\u0e66\0\u0ec7"+
    "\0\u0f28\0\302\0\u0f89\0\u0fea\0\u104b\0\u10ac\0\u110d\0\u116e"+
    "\0\u11cf\0\u1230\0\u0918\0\u1291\0\u12f2\0\u1353\0\u13b4\0\u1415"+
    "\0\u1476\0\u14d7\0\u1538\0\u1599\0\u15fa\0\u165b\0\u16bc\0\u171d"+
    "\0\u177e\0\302\0\u17df\0\u1840\0\u18a1\0\u1902\0\u1963\0\302"+
    "\0\302\0\u19c4\0\302\0\u1a25\0\302\0\u1a86\0\302\0\u1ae7"+
    "\0\u1b48\0\u1ba9\0\u1c0a\0\u1c6b\0\u1ccc\0\302\0\302\0\u1d2d"+
    "\0\u1d8e\0\u1def\0\u1e50\0\u1eb1\0\u1f12\0\u1f73\0\u1fd4\0\u2035"+
    "\0\u2096\0\u20f7\0\u2158\0\u21b9\0\u221a\0\u227b\0\u22dc\0\u233d"+
    "\0\u239e\0\u23ff\0\u2460\0\u24c1\0\u2522\0\u2583\0\u25e4\0\u2645"+
    "\0\u26a6\0\u2707\0\u2768\0\u27c9\0\u282a\0\u288b\0\u28ec\0\u294d"+
    "\0\u29ae\0\u2a0f\0\u2a70\0\u2ad1\0\u2b32\0\u2b93\0\302\0\u2bf4"+
    "\0\u2c55\0\u2cb6\0\u2d17\0\u2d78\0\u2dd9\0\u2e3a\0\u2e9b\0\u2efc"+
    "\0\u2f5d\0\u2fbe\0\u301f\0\u3080\0\u30e1\0\u3142\0\u0918\0\u31a3"+
    "\0\u3204\0\u0918\0\u3265\0\u32c6\0\u3327\0\u3388\0\u33e9\0\u344a"+
    "\0\u34ab\0\u350c\0\u356d\0\u35ce\0\u362f\0\u3690\0\u36f1\0\u3752"+
    "\0\u37b3\0\u3814\0\u3875\0\u38d6\0\u3937\0\u3998\0\u39f9\0\u3a5a"+
    "\0\u3abb\0\u3b1c\0\u3b7d\0\u3bde\0\u3c3f\0\u3ca0\0\u3d01\0\u3d62"+
    "\0\u3dc3\0\u3e24\0\u3e85\0\u3ee6\0\u3f47\0\u3fa8\0\u4009\0\u406a"+
    "\0\u40cb\0\u412c\0\u418d\0\u41ee\0\u424f\0\u42b0\0\u4311\0\u0918"+
    "\0\u4372\0\u43d3\0\u4434\0\u4495\0\u44f6\0\u4557\0\u45b8\0\u4619"+
    "\0\u467a\0\u46db\0\u473c\0\u479d\0\u47fe\0\u485f\0\u48c0\0\u4921"+
    "\0\u4982\0\u49e3\0\u4a44\0\u4aa5\0\u4b06\0\u4b67\0\u4bc8\0\u4c29"+
    "\0\u4c8a\0\u4ceb\0\u4d4c\0\u4dad\0\u4e0e\0\u4e6f\0\u4ed0\0\u4f31"+
    "\0\u4f92\0\u4ff3\0\u5054\0\u50b5\0\u5116\0\u5177\0\u51d8\0\u5239"+
    "\0\u529a\0\u52fb\0\u535c\0\u53bd\0\u541e\0\u547f\0\u54e0\0\u5541"+
    "\0\u55a2\0\u5603\0\u5664\0\u56c5\0\u5726\0\u5787\0\u57e8\0\u5849"+
    "\0\u58aa\0\u590b\0\u596c\0\u59cd\0\u5a2e\0\u5a8f\0\u5af0\0\u5b51"+
    "\0\u5bb2\0\u5c13\0\u5c74\0\u5cd5\0\u5d36\0\u5d97\0\u5df8\0\u5e59"+
    "\0\u5eba\0\u5f1b\0\u5f7c\0\u5fdd\0\u603e\0\u609f\0\u6100\0\u6161"+
    "\0\u61c2\0\u6223\0\u6284\0\u62e5\0\u6346\0\u63a7\0\u6408\0\u6469"+
    "\0\u64ca\0\u652b\0\u658c\0\u65ed\0\u664e\0\u66af\0\u6710\0\u0918"+
    "\0\u6771\0\u67d2\0\u6833\0\u6894\0\u68f5\0\u6956\0\u69b7\0\u6a18"+
    "\0\u6a79\0\u6ada\0\u6b3b\0\u6b9c\0\u0918\0\u6bfd\0\u6c5e\0\u6cbf"+
    "\0\u6d20\0\u6d81\0\u6de2\0\u6e43\0\u6ea4\0\u6f05\0\u6f66\0\u6fc7"+
    "\0\u7028\0\u7089\0\u70ea\0\u714b\0\u71ac\0\u720d\0\u726e\0\u72cf"+
    "\0\u7330\0\u7391\0\u73f2\0\u7453\0\u74b4\0\u7515\0\u7576\0\u75d7"+
    "\0\u7638\0\u7699\0\302\0\u0308\0\302\0\u76fa\0\u775b\0\u77bc"+
    "\0\302\0\u781d\0\u787e\0\u78df\0\u7940\0\u79a1\0\u7a02\0\u7a63"+
    "\0\u7ac4\0\u7b25\0\u7b86\0\u7be7\0\u7c48\0\u7ca9\0\u7d0a\0\u7d6b"+
    "\0\u7dcc\0\u0918\0\u7e2d\0\u7e8e\0\u7eef\0\u7f50\0\u7fb1\0\u8012"+
    "\0\u8073\0\u80d4\0\u8135\0\u8196\0\u81f7\0\u8258\0\u82b9\0\u831a"+
    "\0\u837b\0\u83dc\0\u843d\0\u849e\0\u84ff\0\u8560\0\u85c1\0\302"+
    "\0\u8622\0\u8683\0\u86e4\0\u8745\0\u87a6\0\u8807\0\u8868\0\u88c9"+
    "\0\u892a\0\u898b\0\u0918\0\u0918\0\u89ec\0\u8a4d\0\u8aae\0\u8b0f"+
    "\0\u8b70\0\u8bd1\0\u8c32\0\u8c93\0\u0918\0\u8cf4\0\u8d55\0\u8db6"+
    "\0\u8e17\0\u8e78\0\u8ed9\0\u8f3a\0\u8f9b\0\u8ffc\0\u905d\0\u90be"+
    "\0\u911f\0\u9180\0\u91e1\0\u9242\0\u92a3\0\u9304\0\u9365\0\u93c6"+
    "\0\u0918\0\u9427\0\u9488\0\u94e9\0\u954a\0\u95ab\0\u960c\0\u966d"+
    "\0\u96ce\0\u972f\0\u9790\0\u97f1\0\u9852\0\u98b3\0\u9914\0\u9975"+
    "\0\u99d6\0\u9a37\0\u9a98\0\u9af9\0\u9b5a\0\u9bbb\0\u9c1c\0\u9c7d"+
    "\0\u9cde\0\u9d3f\0\u9da0\0\u9e01\0\u9e62\0\u9ec3\0\u9f24\0\u9f85"+
    "\0\u9fe6\0\ua047\0\ua0a8\0\ua109\0\302\0\ua16a\0\ua1cb\0\ua22c"+
    "\0\ua28d\0\u0918\0\ua2ee\0\ua34f\0\ua3b0\0\ua411\0\ua472\0\ua4d3"+
    "\0\ua534\0\ua595\0\ua5f6\0\ua657\0\ua6b8\0\ua719\0\ua77a\0\ua7db"+
    "\0\ua83c\0\ua89d\0\ua8fe\0\ua95f\0\ua9c0\0\uaa21\0\uaa82\0\uaae3"+
    "\0\uab44\0\uaba5\0\uac06\0\uac67\0\uacc8\0\uad29\0\uad8a\0\uadeb"+
    "\0\uae4c\0\uaead\0\uaf0e\0\uaf6f\0\uafd0\0\ub031\0\ub092\0\ub0f3"+
    "\0\ub154\0\ub1b5\0\ub216\0\ub277\0\ub2d8\0\ub339\0\ub39a\0\ub3fb"+
    "\0\ub45c\0\ub4bd\0\ub51e\0\ub57f\0\ub5e0\0\ub641\0\ub6a2\0\ub703"+
    "\0\ub764\0\302\0\ub7c5\0\ub826\0\ub887\0\ub8e8\0\ub949\0\ub9aa"+
    "\0\uba0b\0\uba6c\0\ubacd\0\ubb2e\0\ubb8f\0\ubbf0\0\302\0\ubc51"+
    "\0\ubcb2\0\302\0\ubd13\0\ubd74\0\ubdd5\0\ube36\0\ube97\0\ubef8"+
    "\0\ubf59\0\ubfba\0\uc01b\0\302\0\302\0\302\0\302\0\302"+
    "\0\uc07c\0\uc0dd\0\u0918\0\uc13e\0\uc19f\0\uc200\0\uc261\0\uc2c2"+
    "\0\uc323\0\uc384\0\uc3e5\0\uc446\0\uc4a7\0\uc508\0\uc569\0\302"+
    "\0\uc5ca\0\uc62b\0\uc68c\0\uc6ed\0\uc74e\0\uc7af\0\uc810\0\uc871"+
    "\0\uc8d2\0\uc933\0\uc994\0\uc9f5\0\uca56\0\ucab7\0\ucb18\0\ucb79"+
    "\0\ucbda\0\302\0\ucc3b\0\ucc9c\0\uccfd\0\302\0\ucd5e\0\ucdbf"+
    "\0\uce20\0\uce81\0\ucee2\0\ucf43\0\ucfa4\0\ud005\0\ud066\0\ud0c7"+
    "\0\ud128\0\ud189\0\ud1ea\0\ud24b\0\ud2ac\0\ud30d\0\ud36e\0\ud3cf"+
    "\0\ud430\0\ud491\0\u0918\0\ud4f2\0\ud553\0\ud5b4\0\ud615\0\ud676"+
    "\0\ud6d7\0\ud738\0\ud799\0\ud7fa\0\ud85b\0\ud8bc\0\ud91d\0\ud97e"+
    "\0\ud97e\0\ud9df\0\uda40\0\udaa1\0\udb02\0\udb63\0\udbc4\0\udc25"+
    "\0\udc86\0\udce7\0\udd48\0\udda9\0\ude0a\0\ude6b\0\udecc\0\udf2d"+
    "\0\udf8e\0\udfef\0\ue050\0\ue0b1\0\ue112\0\ue173\0\ue1d4\0\ue235"+
    "\0\ue296\0\ue2f7\0\ue358\0\ue3b9\0\ue41a\0\ue47b\0\ue4dc\0\ue53d"+
    "\0\ue59e\0\ue5ff\0\ue660\0\ue6c1\0\ue722\0\ue783\0\ue7e4\0\ue845"+
    "\0\ue8a6\0\ue907\0\u0918\0\ue968\0\ue9c9\0\uea2a\0\u0918\0\uea8b"+
    "\0\302\0\ueaec\0\ueb4d\0\u0918\0\uebae\0\uec0f\0\uec70\0\uecd1"+
    "\0\ued32\0\ued93\0\302\0\uedf4\0\uee55\0\ueeb6\0\uef17\0\uef78"+
    "\0\uefd9\0\uf03a\0\uf09b\0\uf0fc\0\uf15d\0\uf1be\0\uf21f\0\uf280"+
    "\0\uf2e1\0\uf342\0\uf3a3\0\uf404\0\uf465\0\uf4c6\0\uf527\0\uf588"+
    "\0\uf5e9\0\uf64a\0\uf6ab\0\uf70c\0\uf76d\0\uf7ce\0\uf82f\0\uf890"+
    "\0\uf8f1\0\uf952\0\uf9b3\0\ufa14\0\ufa75\0\ufad6\0\ufb37\0\ufb98"+
    "\0\ufbf9\0\ufc5a\0\ufcbb\0\ufd1c\0\ufd7d\0\ufdde\0\ufe3f\0\ufea0"+
    "\0\uff01\0\uff62\0\uffc3\1\44\0\u0918\1\205\0\302\1\346"+
    "\1\u0147\1\u01a8\1\u0209\1\u026a\0\u0918\1\u02cb\0\u0918\1\u032c"+
    "\1\u038d\1\u03ee\1\u044f\1\u04b0\1\u0511\1\u0572\1\u05d3\1\u0634"+
    "\1\u0695\1\u06f6\1\u0757\1\u07b8\1\u0819\1\u087a\1\u08db\1\u093c"+
    "\1\u099d\1\u09fe\1\u0a5f\1\u0ac0\1\u0b21\1\u0b82\1\u0be3\1\u0c44"+
    "\1\u0ca5\1\u0d06\1\u0d67\1\u0dc8\1\u0e29\1\u0e8a\1\u0eeb\1\u0f4c"+
    "\1\u0fad\1\u100e\1\u106f\1\u10d0\1\u1131\0\302\1\u1192\1\u11f3"+
    "\1\u1254\1\u12b5\1\u1316\1\u1377\1\u13d8\1\u1439\1\u149a\1\u14fb"+
    "\1\u155c\1\u15bd\1\u161e\1\u167f\1\u16e0\1\u1741\1\u17a2\1\u1803"+
    "\1\u1864\1\u18c5\1\u1926\1\u1987\1\u19e8\1\u1a49\1\u1aaa\1\u1b0b"+
    "\1\u1b6c\1\u1bcd\1\u1c2e\1\u1c8f\1\u1cf0\1\u1d51\1\u1db2\1\u1e13"+
    "\1\u1e74\1\u1ed5\1\u1f36\1\u1f97\1\u1ff8\1\u2059\1\u20ba\1\u211b"+
    "\1\u217c\1\u21dd\1\u223e\1\u229f\1\u2300\0\302\0\302\1\u2361"+
    "\1\u23c2\1\u2423\1\u2484\1\u24e5\1\u2546\1\u25a7\1\u2608\1\u2669"+
    "\1\u26ca\1\u272b\1\u278c\1\u27ed\1\u284e\1\u28af\1\u2910\1\u2971"+
    "\1\u29d2\1\u2a33\1\u2a94\1\u2af5\1\u2b56\1\u2bb7\1\u2c18\1\u2c79"+
    "\1\u2cda\1\u2d3b\1\u2d9c\1\u2dfd\1\u2e5e\1\u2ebf\1\u2f20\1\u2f81"+
    "\1\u2fe2\1\u3043\1\u30a4\1\u3105\1\u3166\1\u31c7\1\u3228\1\u3289"+
    "\1\u32ea\1\u334b\1\u33ac\1\u340d\1\u346e\1\u34cf\1\u3530\1\u3591"+
    "\1\u35f2\1\u3653\1\u36b4\1\u3715\1\u3776\1\u37d7\1\u3838\1\u3899"+
    "\1\u38fa\1\u395b\1\u39bc\1\u3a1d\1\u3a7e\1\u3adf\1\u3b40\1\u3ba1"+
    "\0\ufb37\0\ueaec\1\u3c02\1\u3c63\1\u3cc4\1\u3d25\1\u3d86\1\u3de7"+
    "\1\u3e48\1\u3ea9\1\u3f0a\1\u3f6b\1\u3fcc\1\u402d\1\u408e\1\u40ef"+
    "\1\u4150\1\u41b1\1\u4212\1\u4273\1\u42d4\1\u4335\1\u4396\1\u43f7"+
    "\0\u0918\1\u4458\1\u44b9\1\u451a\1\u457b\1\u45dc\1\u463d\1\u469e"+
    "\1\u46ff\1\u4760\1\u47c1\1\u4822\1\u4883\1\u48e4\1\u4945\1\u49a6"+
    "\1\u4a07\1\u4a68\1\u4ac9\1\u4b2a\1\u4b8b\1\u4bec\1\u4c4d\1\u4cae"+
    "\1\u4d0f\1\u4d70\1\u4dd1\1\u4e32\1\u4e93\1\u4ef4\1\u4f55\1\u4fb6"+
    "\0\ud8bc\1\u5017\1\u5078\1\u50d9\1\u513a\1\u519b\1\u51fc\1\u525d"+
    "\1\u52be\1\u531f\1\u5380\1\u53e1\1\u5442\1\u54a3\1\u1192\1\u5504"+
    "\1\u5565\1\u55c6\1\u5627\1\u5688\1\u56e9\1\u574a\1\u57ab\1\u580c"+
    "\1\u586d\1\u58ce\1\u592f\1\u5990\1\u59f1\1\u5a52\1\u5ab3\1\u5b14"+
    "\1\u5b75\1\u5bd6\1\u5c37\1\u5c98\1\u5cf9\1\u5d5a\0\302\1\u5dbb"+
    "\1\u5e1c\1\u5e7d\1\u5ede\1\u5f3f\1\u5fa0\1\u6001\1\u6062\1\u60c3"+
    "\1\u6124\1\u6185\1\u61e6\1\u6247\1\u62a8\1\u6309\1\u636a\1\u63cb"+
    "\1\u642c\1\u648d\1\u64ee\1\u654f\1\u65b0\1\u6611\1\u6672\1\u66d3"+
    "\1\u6734\1\u6795\1\u67f6\1\u6857\1\u68b8\1\u6919\1\u697a\1\u69db"+
    "\1\u6a3c\1\u6a9d\1\u6afe\1\u6b5f\1\u6bc0\1\u6c21\1\u6c82\1\u6ce3"+
    "\1\u6d44\1\u6da5\1\u6e06\1\u6e67\1\u6ec8\1\u6f29\1\u6f8a\1\u6feb"+
    "\1\u704c\1\u70ad\1\u710e\1\u716f\1\u71d0\1\u7231\0\u0918\1\u7292"+
    "\1\u72f3\1\u7354\1\u73b5\1\u7416\1\u7477\1\u74d8\1\u7539\1\u759a"+
    "\1\u75fb\1\u765c\1\u76bd\1\u771e\1\u777f\1\u77e0\1\u7841\1\u78a2"+
    "\1\u7903\1\u7964\1\u79c5\1\u7a26\1\u7a87\1\u7ae8\1\u7b49\1\u7baa"+
    "\1\u7c0b\1\u7c6c\1\u7ccd\1\u7d2e\1\u7d8f\1\u7df0\1\u7e51\1\u7eb2"+
    "\1\u7f13\1\u7f74\1\u7fd5\1\u8036\1\u8097\1\u80f8\1\u8159\1\u81ba"+
    "\1\u821b\1\u827c\1\u82dd\1\u833e\1\u839f\1\u8400\1\u8461\1\u84c2"+
    "\1\u8523\1\u8584\1\u85e5\1\u8646\1\u86a7\1\u8708\1\u8769\1\u87ca"+
    "\1\u882b\1\u888c\1\u88ed\1\u894e\1\u89af\1\u8a10\1\u8a71\1\u8ad2"+
    "\1\u8b33\1\u8b94\1\u8bf5\1\u8c56\1\u8cb7\1\u8d18\1\u8d79\1\u8dda"+
    "\1\u8e3b\1\u8e9c\1\u8efd\1\u8f5e\1\u8fbf\1\u9020\1\u9081\1\u90e2"+
    "\1\u9143\1\u91a4\1\u9205\1\u9266\1\u92c7\1\u9328\1\u9389\1\u93ea"+
    "\1\u944b\1\u94ac\1\u950d\1\u956e\1\u95cf\1\u9630\1\u9691\1\u96f2"+
    "\1\u9753\1\u97b4\1\u9815\1\u9876\1\u98d7\1\u9938\1\u9999\1\u99fa"+
    "\1\u9a5b\1\u9abc\1\u9b1d\1\u9b7e\1\u9bdf\1\u9c40\1\u9ca1\1\u9d02"+
    "\1\u9d63\1\u9dc4\1\u9e25\1\u9e86\1\u9ee7\1\u9f48\1\u9fa9\1\ua00a"+
    "\1\ua06b\1\ua0cc\1\ua12d\0\302\1\ua18e\1\ua1ef\1\ua250\1\ua2b1"+
    "\1\ua312\1\ua373\1\ua3d4\1\ua435\1\ua496\1\ua4f7\1\ua558\1\ua5b9"+
    "\1\ua61a\1\ua67b\1\ua6dc\1\ua73d\1\ua79e\1\ua7ff\1\ua860\1\ua8c1"+
    "\1\ua922\1\ua983\1\ua9e4\1\uaa45\1\uaaa6\1\uab07\1\uab68\1\uabc9"+
    "\1\uac2a\1\uac8b\1\uacec\1\uad4d\1\uadae\1\uae0f\1\uae70\1\uaed1"+
    "\1\uaf32\1\uaf93\1\uaff4\1\ub055\1\ub0b6\1\ub117\1\ub178\1\ub1d9"+
    "\1\ub23a\1\ub29b\1\ub2fc\1\ub35d\1\ub3be\1\ub41f\1\ub480\1\ub4e1"+
    "\1\ub542\1\ub5a3\1\ub604\1\ub665\1\ub6c6\1\ub727\1\ub788\1\ub7e9"+
    "\1\ub84a\1\ub8ab\1\ub90c\1\ub96d\1\ub9ce\1\uba2f\1\uba90\1\ubaf1"+
    "\1\ubb52\1\ubbb3\1\ubc14\1\ubc75\1\ubcd6\1\ubd37\1\ubd98\1\ubdf9"+
    "\1\ube5a\1\ubebb\1\ubf1c\1\ubf7d\1\ubfde\1\uc03f\1\uc0a0\1\uc101"+
    "\1\uc162\1\uc1c3\1\uc224\1\uc285\1\uc2e6\1\uc347\1\uc3a8\1\uc409"+
    "\1\uc46a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\4\1\7\1\10\2\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\6\21\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\3\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\2\73\1\75"+
    "\1\76\1\77\1\100\1\101\1\73\1\102\1\103\1\104"+
    "\1\105\1\106\1\73\1\107\2\73\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\3\3\2\120\1\121"+
    "\1\122\2\120\1\123\7\120\1\124\122\120\142\0\1\4"+
    "\2\0\1\4\136\0\1\5\172\0\1\125\221\0\1\126"+
    "\60\0\1\127\124\0\11\130\127\0\1\131\137\0\1\130"+
    "\1\0\11\21\75\0\1\132\27\0\1\133\1\130\1\0"+
    "\1\134\10\21\75\0\1\132\27\0\1\135\1\130\1\0"+
    "\11\21\75\0\1\132\45\0\1\136\140\0\1\137\4\0"+
    "\1\140\1\141\1\142\7\0\1\143\1\0\1\144\1\0"+
    "\1\145\31\0\1\146\50\0\11\73\21\0\1\147\6\0"+
    "\1\150\11\0\15\73\1\151\3\73\1\152\1\153\4\73"+
    "\1\154\2\73\34\0\11\73\17\0\1\155\5\0\1\156"+
    "\14\0\1\157\12\73\1\160\2\73\1\161\2\73\1\162"+
    "\10\73\33\0\1\163\11\73\10\0\1\164\6\0\1\165"+
    "\22\0\10\73\1\166\2\73\1\167\2\73\1\170\5\73"+
    "\1\171\5\73\34\0\11\73\4\0\1\172\3\0\1\173"+
    "\15\0\1\174\13\0\1\175\3\73\1\176\3\73\1\177"+
    "\5\73\1\200\2\73\1\201\10\73\34\0\11\73\42\0"+
    "\13\73\1\202\1\73\1\203\2\73\1\204\6\73\1\205"+
    "\2\73\34\0\11\73\25\0\1\206\3\0\1\207\10\0"+
    "\2\73\1\210\5\73\1\211\2\73\1\212\1\73\1\213"+
    "\1\214\1\210\4\73\1\215\5\73\31\0\1\216\2\0"+
    "\11\73\7\0\1\217\15\0\1\220\14\0\4\73\1\221"+
    "\11\73\1\222\2\73\1\223\10\73\34\0\11\73\42\0"+
    "\10\73\1\224\5\73\1\225\13\73\22\0\1\207\11\0"+
    "\11\73\26\0\1\226\13\0\5\73\1\227\6\73\1\230"+
    "\1\231\14\73\34\0\11\73\42\0\32\73\34\0\1\73"+
    "\6\232\2\73\10\0\1\233\16\0\1\234\12\0\1\235"+
    "\1\236\6\73\1\237\4\73\1\240\1\241\4\73\1\242"+
    "\6\73\34\0\11\73\4\0\1\243\3\0\1\244\31\0"+
    "\1\245\3\73\1\246\11\73\1\247\13\73\34\0\11\73"+
    "\4\0\1\250\35\0\1\251\15\73\1\252\13\73\34\0"+
    "\11\73\25\0\1\253\14\0\17\73\1\254\1\73\1\255"+
    "\2\73\1\256\5\73\33\0\1\163\11\73\3\0\1\257"+
    "\14\0\1\260\10\0\1\207\10\0\1\261\7\73\1\262"+
    "\2\73\1\263\1\264\1\73\1\265\2\73\1\266\1\73"+
    "\1\267\2\73\1\270\1\271\2\73\34\0\11\73\42\0"+
    "\24\73\1\272\5\73\34\0\11\73\3\0\1\273\4\0"+
    "\1\274\3\0\1\275\25\0\1\276\3\73\1\277\25\73"+
    "\34\0\11\73\27\0\1\300\12\0\2\73\1\301\1\73"+
    "\1\302\2\73\1\303\1\304\5\73\1\305\4\73\1\306"+
    "\3\73\1\307\1\310\1\73\31\0\1\311\2\0\11\73"+
    "\14\0\1\312\25\0\1\313\1\314\2\73\1\315\2\73"+
    "\1\316\1\317\3\73\1\320\4\73\1\321\1\322\7\73"+
    "\34\0\11\73\42\0\15\73\1\323\14\73\34\0\11\73"+
    "\42\0\4\73\1\324\25\73\34\0\11\73\13\0\1\325"+
    "\26\0\1\326\3\73\1\327\2\73\1\330\22\73\34\0"+
    "\11\73\11\0\1\331\30\0\14\73\1\320\4\73\1\332"+
    "\1\333\7\73\34\0\11\73\10\0\1\334\1\331\30\0"+
    "\4\73\1\335\7\73\1\320\5\73\1\333\7\73\31\0"+
    "\1\336\2\0\11\73\5\0\1\337\1\0\1\340\1\0"+
    "\1\341\2\0\1\342\6\0\1\343\1\344\1\0\1\345"+
    "\1\346\2\347\1\0\1\350\1\351\5\0\15\73\1\352"+
    "\1\353\4\73\1\354\6\73\6\0\1\355\3\0\1\356"+
    "\36\0\1\357\1\360\1\361\1\362\1\360\1\363\4\360"+
    "\2\0\1\364\3\0\1\365\1\366\1\367\1\0\1\370"+
    "\13\0\1\371\1\372\1\373\1\374\2\0\1\375\2\0"+
    "\1\376\1\377\1\u0100\1\0\1\u0101\1\0\1\u0102\1\u0103"+
    "\1\u0104\1\u0105\2\0\1\u0106\1\u0107\1\u0104\1\0\1\u0108"+
    "\103\0\1\u0109\62\0\1\u010a\4\0\11\73\42\0\1\73"+
    "\1\u010b\1\u010c\12\73\1\u010d\3\73\1\u010e\1\u010f\1\u0110"+
    "\1\u0111\5\73\34\0\11\73\42\0\1\u0112\7\73\1\u0113"+
    "\21\73\34\0\11\73\42\0\7\73\1\u0114\6\73\1\u0115"+
    "\5\73\1\u0116\5\73\34\0\11\73\42\0\1\u0117\1\u0118"+
    "\2\73\1\u0119\3\73\1\u011a\21\73\34\0\11\73\40\0"+
    "\1\u011b\1\0\25\73\1\u011c\1\73\1\u011d\2\73\34\0"+
    "\11\73\20\0\1\u011e\2\0\1\u011f\16\0\15\73\1\u0120"+
    "\14\73\34\0\11\73\42\0\2\73\1\u0118\1\73\1\u0121"+
    "\25\73\34\0\11\73\23\0\1\u011f\16\0\3\73\1\u0122"+
    "\10\73\1\u0123\1\u0124\3\73\1\u0125\1\u0126\7\73\34\0"+
    "\11\73\42\0\2\73\1\u011a\1\73\1\u0127\10\73\1\u0128"+
    "\1\u0129\13\73\34\0\11\73\42\0\1\u012a\3\73\1\u012b"+
    "\3\73\1\u012c\21\73\33\0\1\u012d\11\73\6\0\1\u012e"+
    "\1\u012f\10\0\1\u0130\2\0\1\u0131\2\0\1\u0132\13\0"+
    "\16\73\1\u0133\1\u0134\12\73\34\0\11\73\42\0\21\73"+
    "\1\u0135\10\73\34\0\11\73\42\0\10\73\1\u0136\5\73"+
    "\1\u0137\2\73\1\u0138\5\73\1\u0139\2\73\34\0\11\73"+
    "\42\0\1\u013a\3\73\1\u013b\11\73\1\u013c\2\73\1\u013d"+
    "\10\73\34\0\11\73\42\0\4\73\1\u013e\3\73\1\u013f"+
    "\5\73\1\u0140\1\73\1\u0141\2\73\1\u0142\1\u0143\5\73"+
    "\34\0\11\73\42\0\1\u013f\1\73\1\210\4\73\1\u0144"+
    "\1\u0145\5\73\1\u0146\1\210\5\73\1\u0147\4\73\34\0"+
    "\11\73\42\0\17\73\1\u0148\5\73\2\u0149\3\73\34\0"+
    "\11\73\42\0\1\u014a\25\73\1\u0149\3\73\34\0\11\73"+
    "\42\0\16\73\1\u014b\2\73\1\u014c\6\73\1\u014d\1\73"+
    "\100\0\1\u014e\1\u014f\26\0\1\u0150\63\0\1\u0151\10\0"+
    "\1\u0152\1\0\1\207\1\0\1\u0151\42\0\3\u0153\35\0"+
    "\1\u0154\1\0\11\21\246\0\1\u0155\52\0\1\u0156\141\0"+
    "\1\u0130\35\0\1\u0130\5\0\1\u0157\114\0\1\u0158\50\0"+
    "\1\u0159\173\0\1\u0159\215\0\1\u015a\47\0\11\130\75\0"+
    "\1\132\11\0\2\131\2\0\135\131\42\0\1\u015b\153\0"+
    "\1\u015c\5\0\1\u015d\74\0\1\130\1\0\11\21\40\0"+
    "\1\u011b\34\0\1\132\66\0\1\u015c\2\0\1\u015e\2\0"+
    "\1\u015d\127\0\1\u015f\25\0\1\u0160\141\0\1\u0161\72\0"+
    "\1\u0162\61\0\1\u0163\135\0\1\u0164\140\0\1\u0165\126\0"+
    "\1\u0166\60\0\1\u0167\174\0\1\u0168\145\0\1\u0169\100\0"+
    "\11\73\42\0\22\73\1\u016a\7\73\34\0\11\73\42\0"+
    "\2\73\1\u016b\27\73\34\0\11\73\42\0\14\73\1\u016c"+
    "\15\73\34\0\11\73\42\0\4\73\1\u016d\25\73\51\0"+
    "\1\u016e\23\0\1\u016f\132\0\1\u0170\105\0\11\73\42\0"+
    "\2\73\1\u0171\27\73\34\0\11\73\42\0\1\u0172\23\73"+
    "\1\u0173\5\73\34\0\11\73\42\0\21\73\1\u0174\5\73"+
    "\1\u0175\2\73\34\0\11\73\42\0\16\73\1\u0176\13\73"+
    "\101\0\1\207\125\0\1\u0177\123\0\1\u0178\123\0\11\73"+
    "\42\0\21\73\1\u0179\10\73\34\0\11\73\42\0\16\73"+
    "\1\u017a\2\73\1\u017b\10\73\34\0\11\73\42\0\15\73"+
    "\1\u017c\1\u017d\13\73\34\0\11\73\42\0\1\73\1\u017e"+
    "\30\73\72\0\1\u017f\121\0\1\u0155\133\0\1\u0180\126\0"+
    "\11\73\42\0\21\73\1\u0181\10\73\34\0\11\73\42\0"+
    "\6\73\1\u0182\4\73\1\u0183\3\73\1\u0184\3\73\1\u0185"+
    "\6\73\34\0\11\73\42\0\1\u0186\21\73\1\u0187\7\73"+
    "\34\0\11\73\42\0\23\73\1\u0188\6\73\34\0\11\73"+
    "\42\0\1\u0189\31\73\34\0\11\73\42\0\22\73\1\u018a"+
    "\7\73\34\0\11\73\42\0\3\73\1\u018b\2\73\1\u018c"+
    "\23\73\34\0\11\73\42\0\24\73\1\u018d\5\73\34\0"+
    "\11\73\42\0\4\73\1\u018e\12\73\1\u018f\12\73\51\0"+
    "\1\u0190\123\0\11\73\42\0\3\73\1\u0191\26\73\34\0"+
    "\11\73\42\0\13\73\1\u0192\13\73\1\u018c\2\73\34\0"+
    "\11\73\42\0\16\73\1\u0193\13\73\34\0\11\73\22\0"+
    "\1\u0194\17\0\32\73\34\0\11\73\42\0\21\73\1\u0195"+
    "\10\73\34\0\11\73\42\0\13\73\1\u0196\1\73\1\u0197"+
    "\14\73\74\0\1\u0155\116\0\1\u0198\137\0\1\u0199\3\0"+
    "\1\u019a\117\0\11\73\42\0\23\73\1\u019b\6\73\34\0"+
    "\11\73\42\0\23\73\1\u019c\6\73\34\0\11\73\42\0"+
    "\1\u019d\3\73\1\u019e\3\73\1\u019f\21\73\34\0\11\73"+
    "\42\0\22\73\1\u01a0\7\73\34\0\11\73\42\0\21\73"+
    "\1\u01a1\10\73\50\0\1\u0180\124\0\11\73\42\0\1\u01a2"+
    "\31\73\34\0\11\73\42\0\3\73\1\u01a3\13\73\1\u01a4"+
    "\12\73\56\0\1\u01a5\134\0\1\u01a6\4\0\1\u01a7\115\0"+
    "\11\73\42\0\1\73\1\u01a8\30\73\34\0\11\73\42\0"+
    "\13\73\1\u01a9\16\73\34\0\11\73\42\0\15\73\1\u01aa"+
    "\4\73\1\u01ab\7\73\34\0\11\73\25\0\1\u01ac\14\0"+
    "\32\73\34\0\11\73\42\0\6\73\1\u01ad\23\73\34\0"+
    "\11\73\5\0\1\u01ae\4\0\1\u01af\27\0\32\73\57\0"+
    "\1\u01b0\14\0\1\u01b1\120\0\1\u01b2\120\0\11\73\42\0"+
    "\6\73\1\u01b3\6\73\1\u01b4\5\73\1\u01b5\6\73\34\0"+
    "\11\73\42\0\3\73\1\u01b6\11\73\1\u01b7\14\73\34\0"+
    "\11\73\42\0\3\73\1\u01b8\26\73\76\0\1\u0199\76\0"+
    "\11\73\42\0\25\73\1\u01b9\4\73\34\0\11\73\42\0"+
    "\21\73\1\u01ba\10\73\51\0\1\u01bb\123\0\11\73\42\0"+
    "\4\73\1\u01bc\25\73\34\0\11\73\42\0\1\u01bd\31\73"+
    "\34\0\11\73\42\0\23\73\1\u01be\6\73\72\0\1\u01bf"+
    "\142\0\1\207\100\0\11\73\42\0\21\73\1\u01c0\2\73"+
    "\1\u01c1\5\73\34\0\11\73\42\0\2\73\1\u01c2\27\73"+
    "\34\0\11\73\42\0\16\73\1\u01c3\11\73\1\u01c4\1\73"+
    "\34\0\11\73\42\0\23\73\1\u01c5\6\73\34\0\11\73"+
    "\42\0\13\73\1\u01c6\16\73\34\0\11\73\42\0\10\73"+
    "\1\u01c7\5\73\1\u01c8\13\73\31\0\1\u01c9\2\0\11\73"+
    "\42\0\32\73\34\0\11\73\42\0\21\73\1\240\10\73"+
    "\34\0\11\73\42\0\13\73\1\267\16\73\34\0\11\73"+
    "\42\0\1\u01ca\7\73\1\u01cb\21\73\70\0\1\u01cc\124\0"+
    "\1\u01cd\143\0\1\u01ce\115\0\11\73\42\0\3\73\1\u01cf"+
    "\26\73\34\0\11\73\42\0\1\u01d0\1\73\1\u01d1\1\u01d2"+
    "\2\73\1\u01d3\10\73\1\u01d4\3\73\1\u01d5\6\73\51\0"+
    "\1\u01d6\123\0\11\73\42\0\1\u01d7\7\73\1\u018c\21\73"+
    "\34\0\11\73\42\0\13\73\1\u01d8\1\73\1\u01d9\2\73"+
    "\1\u01da\2\73\1\u01db\6\73\34\0\11\73\42\0\1\u01dc"+
    "\31\73\34\0\11\73\42\0\6\73\1\u01dd\5\73\1\u01de"+
    "\1\240\14\73\34\0\11\73\42\0\21\73\1\u01df\10\73"+
    "\34\0\11\73\42\0\16\73\1\u01e0\2\73\1\u01e1\10\73"+
    "\34\0\11\73\42\0\17\73\1\310\12\73\74\0\1\u01e2"+
    "\170\0\1\u01e3\50\0\11\73\42\0\15\73\1\u01e4\14\73"+
    "\34\0\11\73\42\0\13\73\1\u01e5\16\73\34\0\11\73"+
    "\42\0\27\73\1\u01e6\2\73\34\0\11\73\42\0\4\73"+
    "\1\u01e7\3\73\1\u01e8\21\73\34\0\11\73\42\0\14\73"+
    "\1\u01e9\15\73\34\0\11\73\42\0\1\u01ea\7\73\1\u01eb"+
    "\21\73\34\0\11\73\42\0\1\u01ec\31\73\34\0\11\73"+
    "\42\0\23\73\1\u01ed\6\73\33\0\1\u012d\11\73\4\0"+
    "\1\u01ee\21\0\1\u0132\13\0\32\73\34\0\11\73\42\0"+
    "\21\73\1\u01ef\10\73\61\0\1\u01f0\113\0\11\73\42\0"+
    "\10\73\1\u01f1\21\73\34\0\11\73\42\0\1\73\1\u018c"+
    "\30\73\34\0\11\73\42\0\10\73\1\u01f2\21\73\107\0"+
    "\1\u01f3\65\0\11\73\42\0\4\73\1\u01f4\25\73\34\0"+
    "\11\73\42\0\2\73\1\u01f5\27\73\64\0\1\u01f6\110\0"+
    "\11\73\42\0\13\73\1\u01f7\16\73\74\0\1\u01f8\171\0"+
    "\1\u01f9\126\0\1\u01fa\155\0\1\u01fb\134\0\1\u01fc\136\0"+
    "\1\u01fd\5\0\1\u01fe\143\0\1\u01ff\134\0\1\u0200\2\0"+
    "\1\u0201\131\0\1\u0130\4\0\1\u0202\1\u0157\133\0\1\u0203"+
    "\137\0\1\u0130\4\0\1\u0204\1\u0205\132\0\1\u0130\5\0"+
    "\1\u0205\43\0\11\73\20\0\1\u0130\21\0\32\73\34\0"+
    "\11\73\42\0\16\73\1\u0206\13\73\34\0\11\73\42\0"+
    "\7\73\1\u0207\22\73\123\0\1\u0130\5\0\1\u0157\74\0"+
    "\1\u0208\150\0\1\u0209\6\0\1\u020a\140\0\1\u020a\120\0"+
    "\1\u020b\17\0\1\u020a\111\0\1\u020c\26\0\1\u020a\126\0"+
    "\1\u020d\11\0\1\u020a\105\0\1\u020e\41\0\1\u020f\62\0"+
    "\1\u0104\1\0\1\u0104\206\0\1\u0210\5\0\1\u0211\121\0"+
    "\1\u0212\22\0\1\u0213\16\0\1\u0214\1\u0104\125\0\1\u0215"+
    "\132\0\1\u0216\136\0\1\u0104\130\0\1\u0217\23\0\1\u0218"+
    "\117\0\1\u0219\135\0\1\u021a\161\0\1\u021b\122\0\1\u021c"+
    "\7\0\1\u021d\54\0\1\u020f\1\0\1\u0104\46\0\1\u0155"+
    "\140\0\1\u0155\11\0\1\u021e\126\0\1\u0155\1\u0210\5\0"+
    "\1\u021f\131\0\1\u0155\12\0\1\u0220\125\0\1\u0155\162\0"+
    "\1\u0221\47\0\3\u0104\56\0\1\u021e\57\0\3\u0104\56\0"+
    "\1\u0222\100\0\1\u0104\30\0\5\u0104\56\0\1\u0223\4\0"+
    "\1\u0224\1\u0225\34\0\1\u0226\30\0\1\u0227\2\0\1\u0228"+
    "\120\0\1\u0229\64\0\11\73\42\0\22\73\1\u0128\7\73"+
    "\34\0\11\73\42\0\16\73\1\u022a\13\73\34\0\11\73"+
    "\42\0\3\73\1\u022b\2\73\1\u022c\23\73\34\0\11\73"+
    "\42\0\2\73\1\u022d\27\73\34\0\11\73\42\0\10\73"+
    "\1\u022e\21\73\34\0\11\73\42\0\1\u022e\31\73\34\0"+
    "\11\73\42\0\6\73\1\u022f\23\73\34\0\11\73\42\0"+
    "\13\73\1\u0128\16\73\34\0\11\73\42\0\15\73\1\u0230"+
    "\14\73\34\0\11\73\42\0\4\73\1\u0231\3\73\1\u0232"+
    "\21\73\34\0\11\73\42\0\15\73\1\u0233\4\73\1\u0234"+
    "\7\73\34\0\11\73\42\0\1\73\1\u0235\12\73\1\u0236"+
    "\15\73\34\0\11\73\42\0\30\73\1\u0237\1\73\34\0"+
    "\11\73\42\0\3\73\1\u0128\26\73\34\0\11\73\42\0"+
    "\23\73\1\u0128\6\73\34\0\11\73\42\0\14\73\1\u0128"+
    "\15\73\105\0\1\u0238\67\0\11\73\42\0\1\u0112\31\73"+
    "\34\0\11\73\42\0\17\73\1\u0125\12\73\107\0\1\u0239"+
    "\7\0\1\u023a\130\0\1\u023b\65\0\11\73\14\0\1\u023c"+
    "\25\0\32\73\34\0\11\73\42\0\16\73\1\u023d\4\73"+
    "\1\u023e\6\73\34\0\11\73\42\0\4\73\1\u023f\25\73"+
    "\34\0\11\73\42\0\1\u0240\31\73\34\0\11\73\26\0"+
    "\1\u0241\13\0\23\73\1\u0128\1\73\1\u0242\4\73\34\0"+
    "\11\73\42\0\21\73\1\u0128\10\73\34\0\11\73\6\0"+
    "\1\u0243\33\0\32\73\34\0\11\73\42\0\15\73\1\u0244"+
    "\14\73\34\0\11\73\42\0\6\73\1\u0245\17\73\1\u0246"+
    "\3\73\34\0\11\73\42\0\27\73\1\u0247\2\73\34\0"+
    "\11\73\42\0\1\u0248\2\73\1\u0249\26\73\34\0\11\73"+
    "\42\0\15\73\1\u0247\14\73\112\0\1\u0155\156\0\1\u024a"+
    "\123\0\1\u024b\134\0\1\u024c\7\0\1\u024d\151\0\1\u024e"+
    "\142\0\1\u024f\42\0\11\73\42\0\21\73\1\u0250\1\73"+
    "\1\u0128\6\73\34\0\11\73\42\0\25\73\1\u0128\4\73"+
    "\34\0\11\73\42\0\4\73\1\u0251\25\73\34\0\11\73"+
    "\42\0\10\73\1\u0252\21\73\34\0\11\73\42\0\6\73"+
    "\1\u0253\7\73\1\u0118\13\73\34\0\11\73\42\0\13\73"+
    "\1\u0254\16\73\34\0\11\73\42\0\15\73\1\u0255\14\73"+
    "\34\0\11\73\40\0\1\u0256\1\0\1\u0112\4\73\1\u0128"+
    "\6\73\1\u0257\15\73\34\0\11\73\42\0\24\73\1\u0258"+
    "\1\73\1\u0259\3\73\34\0\11\73\42\0\4\73\1\u0191"+
    "\25\73\34\0\11\73\42\0\20\73\1\u0128\2\73\1\u025a"+
    "\6\73\34\0\11\73\42\0\15\73\1\u0234\14\73\34\0"+
    "\11\73\42\0\13\73\1\u025b\16\73\34\0\11\73\42\0"+
    "\21\73\1\u0119\10\73\34\0\11\73\42\0\1\u025c\2\73"+
    "\1\u025d\26\73\34\0\11\73\42\0\1\73\1\u0128\12\73"+
    "\1\u0128\15\73\34\0\11\73\42\0\4\73\1\u025e\25\73"+
    "\34\0\11\73\42\0\14\73\1\u025f\15\73\34\0\11\73"+
    "\26\0\1\u0241\13\0\32\73\34\0\11\73\42\0\14\73"+
    "\1\u0260\15\73\34\0\11\73\42\0\17\73\1\u0246\12\73"+
    "\34\0\11\73\4\0\1\u0261\35\0\32\73\34\0\11\73"+
    "\42\0\21\73\1\u0262\10\73\34\0\11\73\42\0\21\73"+
    "\1\u0263\10\73\34\0\11\73\42\0\16\73\1\u0264\13\73"+
    "\34\0\11\73\17\0\1\u0265\22\0\32\73\35\0\6\u0266"+
    "\132\0\1\u0267\6\u0268\2\u0267\104\0\1\u0267\24\0\6\u0269"+
    "\131\0\1\163\156\0\32\u026a\27\0\1\u026b\14\0\1\u026a"+
    "\110\0\1\u026c\153\0\1\u026d\44\0\1\u026e\237\0\1\u026f"+
    "\37\0\11\u0270\77\0\1\u0271\124\0\1\u0272\117\0\1\u0273"+
    "\140\0\1\u0274\124\0\1\u0155\156\0\1\u0155\143\0\1\u0238"+
    "\74\0\1\u0275\177\0\1\u0160\154\0\1\u0238\137\0\1\u0276"+
    "\127\0\1\u0277\141\0\1\u0278\124\0\1\u0279\131\0\1\u0155"+
    "\105\0\11\73\42\0\7\73\1\u027a\22\73\24\0\1\u0155"+
    "\7\0\10\73\1\u027b\6\0\1\u027c\14\0\1\u027d\16\0"+
    "\32\73\34\0\11\73\42\0\22\73\1\213\7\73\53\0"+
    "\1\u027e\142\0\1\u01cd\162\0\1\u027f\75\0\11\73\42\0"+
    "\12\73\1\u0280\17\73\34\0\11\73\42\0\2\73\1\u0281"+
    "\27\73\34\0\11\73\42\0\4\73\1\u01d2\25\73\34\0"+
    "\11\73\42\0\3\73\1\u0282\26\73\34\0\11\73\42\0"+
    "\17\73\1\u0283\12\73\34\0\11\73\42\0\26\73\1\u0284"+
    "\3\73\74\0\1\u0285\137\0\1\u0286\101\0\11\73\42\0"+
    "\2\73\1\u0287\27\73\34\0\11\73\42\0\2\73\1\u0288"+
    "\27\73\34\0\11\73\4\0\1\u0289\2\0\1\u028a\3\0"+
    "\1\u028b\3\0\1\u028c\7\0\1\u028d\12\0\32\73\34\0"+
    "\11\73\42\0\15\73\1\u028e\14\73\34\0\11\73\42\0"+
    "\21\73\1\u028f\10\73\34\0\11\73\42\0\10\73\1\u0290"+
    "\21\73\63\0\1\u01b2\111\0\11\73\42\0\12\73\1\u0291"+
    "\17\73\34\0\11\73\42\0\21\73\1\u0292\10\73\34\0"+
    "\11\73\31\0\1\u0293\10\0\23\73\1\u0294\6\73\34\0"+
    "\11\73\42\0\4\73\1\u0295\25\73\34\0\11\73\42\0"+
    "\4\73\1\u0296\25\73\34\0\11\73\42\0\6\73\1\u0297"+
    "\23\73\34\0\11\73\42\0\17\73\1\u0298\12\73\31\0"+
    "\1\u0299\2\0\11\73\42\0\32\73\34\0\11\73\42\0"+
    "\26\73\1\u029a\3\73\34\0\11\73\42\0\4\73\1\u029b"+
    "\25\73\34\0\11\73\3\0\1\u029c\36\0\32\73\34\0"+
    "\11\73\42\0\2\73\1\u029d\27\73\34\0\11\73\25\0"+
    "\1\u01ac\14\0\21\73\1\213\10\73\53\0\1\u029e\121\0"+
    "\11\73\42\0\5\73\1\u0128\24\73\34\0\11\73\42\0"+
    "\13\73\1\u029f\16\73\34\0\11\73\42\0\1\u01f1\31\73"+
    "\114\0\1\u02a0\7\0\1\u02a1\50\0\11\73\42\0\13\73"+
    "\1\u02a2\16\73\34\0\11\73\42\0\2\73\1\u018c\27\73"+
    "\34\0\11\u0155\104\0\1\u0155\70\0\1\u01cd\114\0\1\u027f"+
    "\23\0\1\u01cd\73\0\11\73\6\0\1\u02a3\33\0\32\73"+
    "\34\0\11\73\42\0\16\73\1\u02a4\13\73\34\0\11\73"+
    "\42\0\17\73\1\u02a5\10\73\1\u01d2\1\73\34\0\11\73"+
    "\42\0\4\73\1\u0284\23\73\1\u01d2\1\73\34\0\11\73"+
    "\42\0\3\73\1\u02a6\26\73\34\0\11\73\42\0\23\73"+
    "\1\u02a7\6\73\34\0\11\73\42\0\10\73\1\u02a8\21\73"+
    "\34\0\11\73\42\0\6\73\1\u02a9\23\73\34\0\11\73"+
    "\42\0\17\73\1\u02aa\12\73\34\0\11\73\42\0\24\73"+
    "\1\u01f1\5\73\74\0\1\u02ab\130\0\1\u02ac\146\0\1\u02ad"+
    "\102\0\11\73\42\0\4\73\1\u02ae\25\73\34\0\11\73"+
    "\25\0\1\u02af\14\0\4\73\1\u029f\25\73\34\0\11\73"+
    "\42\0\23\73\1\u02b0\6\73\113\0\1\u02b1\61\0\11\73"+
    "\42\0\10\73\1\u02b2\21\73\122\0\1\u02b3\146\0\1\u02b4"+
    "\65\0\1\u02b5\143\0\1\u02b6\137\0\1\u01a7\115\0\11\73"+
    "\42\0\4\73\1\u02b7\25\73\34\0\11\73\42\0\24\73"+
    "\1\u02b8\5\73\34\0\11\73\42\0\21\73\1\u02b9\10\73"+
    "\31\0\1\u02ba\2\0\11\73\12\0\1\u01af\27\0\32\73"+
    "\34\0\11\73\42\0\24\73\1\u029f\5\73\34\0\11\73"+
    "\5\0\1\u02bb\34\0\32\73\34\0\11\73\42\0\30\73"+
    "\1\u01d2\1\73\34\0\11\73\42\0\14\73\1\u02bc\15\73"+
    "\66\0\1\u02bd\106\0\11\73\42\0\15\73\1\u02be\14\73"+
    "\34\0\11\73\42\0\15\73\1\u02bf\14\73\34\0\11\73"+
    "\42\0\17\73\1\u02c0\12\73\136\0\2\u0238\35\0\11\73"+
    "\42\0\1\u02c1\31\73\34\0\11\73\42\0\22\73\1\u01e9"+
    "\7\73\34\0\11\310\42\0\32\73\10\0\1\u0155\23\0"+
    "\11\73\42\0\23\73\1\u02c2\6\73\34\0\11\73\26\0"+
    "\1\u02c3\13\0\32\73\34\0\11\73\41\0\1\u02c4\32\73"+
    "\34\0\11\73\42\0\1\u02c5\31\73\34\0\11\73\42\0"+
    "\15\73\1\u02c6\14\73\34\0\11\73\42\0\14\73\1\u02c7"+
    "\15\73\53\0\1\u02c8\13\0\1\u02c9\105\0\11\73\42\0"+
    "\3\73\1\240\15\73\1\u02ca\10\73\34\0\11\73\42\0"+
    "\2\73\1\u02cb\27\73\130\0\1\u0238\1\0\1\u02cc\14\0"+
    "\1\u0238\51\0\1\u01a5\114\0\11\73\42\0\10\73\1\u02cd"+
    "\21\73\34\0\11\73\42\0\13\73\1\310\16\73\34\0"+
    "\11\73\42\0\1\u02ce\22\73\1\u02cf\6\73\34\0\11\73"+
    "\10\0\1\u02d0\31\0\32\73\34\0\11\73\42\0\4\73"+
    "\1\u02d1\25\73\34\0\11\73\42\0\24\73\1\u02d2\5\73"+
    "\74\0\1\u02d3\100\0\11\73\42\0\23\73\1\u02d4\6\73"+
    "\34\0\11\73\42\0\4\73\1\u02d5\25\73\34\0\11\73"+
    "\42\0\3\73\1\u029f\26\73\34\0\11\73\42\0\24\73"+
    "\1\u02d6\5\73\34\0\11\73\30\0\1\u02d7\11\0\32\73"+
    "\34\0\11\73\42\0\3\73\1\u02d8\26\73\34\0\11\73"+
    "\42\0\14\73\1\u02d9\15\73\34\0\11\73\42\0\24\73"+
    "\1\u02da\5\73\34\0\11\73\42\0\23\73\1\u02db\6\73"+
    "\34\0\11\73\42\0\17\73\1\u018c\1\73\1\u02dc\10\73"+
    "\34\0\11\u02dd\42\0\10\73\1\u02de\21\73\10\0\1\u02df"+
    "\102\0\1\u02e0\157\0\1\u02e1\42\0\11\73\42\0\6\73"+
    "\1\u02e2\23\73\34\0\11\73\14\0\1\u02e3\11\0\1\u0132"+
    "\13\0\32\73\34\0\11\73\42\0\23\73\1\u02e4\6\73"+
    "\34\0\11\73\42\0\15\73\1\u02e5\14\73\34\0\11\73"+
    "\42\0\2\73\1\u02e6\12\73\1\310\14\73\34\0\11\73"+
    "\42\0\4\73\1\u018c\25\73\34\0\11\73\42\0\27\73"+
    "\1\u02e7\2\73\34\0\11\73\42\0\15\73\1\u02e7\14\73"+
    "\34\0\11\73\42\0\2\73\1\u02e8\27\73\34\0\11\73"+
    "\42\0\4\73\1\u02e9\25\73\130\0\1\u02ea\44\0\11\73"+
    "\42\0\23\73\1\u02eb\6\73\74\0\1\u016f\100\0\11\73"+
    "\42\0\23\73\1\u018c\6\73\34\0\11\73\42\0\13\73"+
    "\1\u02ec\7\73\1\u0173\6\73\111\0\1\u02ed\63\0\11\73"+
    "\42\0\22\73\1\u02e7\7\73\34\0\11\73\42\0\13\73"+
    "\1\u02e7\16\73\64\0\1\u02ee\110\0\11\73\42\0\13\73"+
    "\1\u02ef\16\73\113\0\1\u02f0\163\0\1\u02a1\113\0\1\u02f1"+
    "\136\0\1\u02f2\163\0\1\u02f3\133\0\1\u02f4\126\0\1\u02f5"+
    "\134\0\1\u02f6\164\0\1\u02f7\114\0\1\u02f8\150\0\1\u02f9"+
    "\114\0\1\u0132\160\0\1\u02fa\136\0\1\u02fb\63\0\11\73"+
    "\42\0\14\73\1\u02fc\15\73\34\0\11\73\42\0\4\73"+
    "\1\u02fd\25\73\117\0\1\u024d\115\0\1\u02fe\115\0\1\u02ff"+
    "\142\0\1\u0104\136\0\1\u0300\163\0\1\u0301\156\0\1\u0104"+
    "\64\0\1\u0104\217\0\1\u0302\74\0\1\u0303\204\0\1\u0304"+
    "\60\0\2\u0104\45\0\1\u0155\21\0\1\u0104\45\0\1\u020f"+
    "\224\0\1\u0305\151\0\1\u0306\121\0\1\u0307\164\0\1\u0308"+
    "\141\0\1\u0309\126\0\1\u0309\123\0\1\u030a\142\0\1\u030b"+
    "\144\0\1\u030c\151\0\1\u0308\121\0\1\u030d\66\0\1\u030e"+
    "\222\0\1\u0155\55\0\11\73\42\0\22\73\1\u030f\7\73"+
    "\34\0\11\73\42\0\13\73\1\u0310\16\73\34\0\11\73"+
    "\42\0\2\73\1\u010c\17\73\1\u010f\1\u0110\6\73\34\0"+
    "\11\73\42\0\15\73\1\u030f\14\73\34\0\11\73\42\0"+
    "\14\73\1\u0311\15\73\34\0\11\73\42\0\16\73\1\u0312"+
    "\13\73\34\0\11\73\42\0\2\73\1\u0313\27\73\34\0"+
    "\11\73\40\0\1\u0314\1\0\32\73\34\0\11\73\42\0"+
    "\11\73\1\u0128\20\73\34\0\11\73\40\0\1\u0315\1\0"+
    "\7\73\1\u0316\22\73\34\0\11\73\42\0\4\73\1\u0317"+
    "\25\73\34\0\11\73\26\0\1\u0318\13\0\32\73\34\0"+
    "\11\73\22\0\1\u0319\17\0\32\73\136\0\1\u0238\126\0"+
    "\1\u0238\144\0\1\u031a\134\0\1\u031a\50\0\11\73\42\0"+
    "\14\73\1\u031b\15\73\34\0\11\73\7\0\1\u031c\6\0"+
    "\1\u031d\10\0\1\u031e\12\0\32\73\34\0\11\73\42\0"+
    "\15\73\1\u031f\14\73\34\0\11\73\42\0\6\73\1\u0128"+
    "\23\73\132\0\1\u0320\42\0\11\73\5\0\1\u0321\13\0"+
    "\1\u0322\5\0\1\u0238\12\0\32\73\122\0\1\u0323\52\0"+
    "\11\73\42\0\6\73\1\u0324\23\73\34\0\11\73\5\0"+
    "\1\u0325\34\0\32\73\34\0\11\73\42\0\4\73\1\u0326"+
    "\25\73\34\0\11\73\33\0\2\u0155\5\0\32\73\34\0"+
    "\11\73\42\0\15\73\1\u0128\14\73\34\0\11\73\42\0"+
    "\10\73\1\u0327\21\73\130\0\1\u0328\146\0\1\207\126\0"+
    "\1\207\123\0\1\u0329\65\0\11\73\42\0\14\73\1\u032a"+
    "\15\73\34\0\11\73\42\0\2\73\1\u032b\27\73\34\0"+
    "\11\73\42\0\22\73\1\u032c\7\73\34\0\11\73\42\0"+
    "\14\73\1\310\15\73\31\0\1\u032d\2\0\11\73\42\0"+
    "\32\73\34\0\11\73\42\0\3\73\1\u032e\26\73\132\0"+
    "\1\u032f\14\0\1\u0229\25\0\11\73\42\0\1\u0330\31\73"+
    "\34\0\11\73\42\0\15\73\1\u0118\14\73\27\0\1\u0238"+
    "\4\0\11\73\26\0\1\u0331\13\0\32\73\34\0\11\73"+
    "\7\0\1\u0332\17\0\1\u0333\12\0\32\73\34\0\11\73"+
    "\42\0\25\73\1\u0310\4\73\34\0\11\73\42\0\21\73"+
    "\1\u0334\10\73\34\0\11\73\7\0\1\u0335\32\0\32\73"+
    "\34\0\11\73\42\0\23\73\1\u0336\6\73\34\0\11\73"+
    "\42\0\4\73\1\u0337\25\73\34\0\11\73\41\0\1\u0338"+
    "\32\73\136\0\1\u0339\36\0\11\73\42\0\10\73\1\u033a"+
    "\21\73\34\0\11\73\42\0\16\73\1\u033b\13\73\117\0"+
    "\1\u033c\115\0\1\u033d\207\0\1\u033e\71\0\1\u033d\46\0"+
    "\1\u033e\140\0\1\u033f\46\0\32\u0340\27\0\1\u0341\14\0"+
    "\1\u0340\107\0\1\u0342\153\0\1\u031a\122\0\1\u0343\56\0"+
    "\1\336\25\0\1\u0344\31\0\1\u0345\14\0\1\u0345\41\0"+
    "\1\u0238\145\0\11\u0270\221\0\1\u0346\143\0\1\u0347\133\0"+
    "\1\u0348\71\0\1\u0155\173\0\1\u0349\163\0\1\u0155\54\0"+
    "\1\u034a\143\0\1\u0180\123\0\11\73\42\0\10\73\1\u034b"+
    "\21\73\34\0\4\73\1\u034c\4\73\42\0\32\73\125\0"+
    "\1\u034d\143\0\1\u034e\73\0\1\u01cd\143\0\1\u01cd\106\0"+
    "\11\73\42\0\6\73\1\u034f\23\73\34\0\11\73\42\0"+
    "\12\73\1\u01d2\17\73\34\0\11\73\42\0\4\73\1\u0350"+
    "\25\73\34\0\11\73\42\0\13\73\1\u0264\16\73\34\0"+
    "\11\73\42\0\15\73\1\u01d2\14\73\55\0\1\u0351\156\0"+
    "\1\u0352\101\0\11\73\42\0\13\73\1\u0353\16\73\34\0"+
    "\11\73\42\0\12\73\1\213\17\73\122\0\1\u0354\146\0"+
    "\1\u0355\135\0\1\u0356\132\0\1\u02e0\130\0\1\u0357\65\0"+
    "\11\73\42\0\4\73\1\u0358\25\73\34\0\11\73\42\0"+
    "\3\73\1\213\26\73\34\0\11\73\42\0\2\73\1\u0359"+
    "\27\73\34\0\11\73\12\0\1\u01af\27\0\32\73\34\0"+
    "\11\73\42\0\4\73\1\u01e9\25\73\107\0\1\u035a\65\0"+
    "\11\73\42\0\1\u035b\31\73\34\0\11\73\42\0\15\73"+
    "\1\u035c\14\73\34\0\11\73\42\0\2\73\1\u035d\27\73"+
    "\34\0\11\73\42\0\15\73\1\u035e\14\73\34\0\11\73"+
    "\12\0\1\u035f\14\0\1\u0360\12\0\32\73\74\0\1\u0361"+
    "\100\0\11\73\11\0\1\u02a1\2\0\1\u0362\25\0\32\73"+
    "\73\0\1\u0363\101\0\11\73\17\0\1\u0364\22\0\32\73"+
    "\31\0\1\u0365\223\0\1\u02a1\60\0\11\73\26\0\1\u0366"+
    "\13\0\32\73\107\0\1\u0367\65\0\11\73\42\0\7\73"+
    "\1\u0368\22\73\34\0\11\73\7\0\1\u0369\7\0\1\u0265"+
    "\2\0\1\u0194\17\0\32\73\34\0\11\73\42\0\16\73"+
    "\1\u036a\13\73\34\0\11\73\42\0\31\73\1\u036b\34\0"+
    "\11\73\42\0\4\73\1\u036c\25\73\34\0\11\73\42\0"+
    "\15\73\1\u036d\14\73\75\0\1\u016f\114\0\1\u0199\3\0"+
    "\1\u0199\117\0\11\73\42\0\13\73\1\213\16\73\113\0"+
    "\1\u036e\61\0\11\73\3\0\1\u036f\36\0\32\73\115\0"+
    "\1\u0155\57\0\11\73\42\0\22\73\1\u0370\7\73\133\0"+
    "\1\u0371\114\0\1\u0372\3\0\1\u0372\113\0\1\u0373\142\0"+
    "\1\u0374\104\0\11\73\42\0\15\73\1\u0375\14\73\34\0"+
    "\11\73\42\0\1\u0376\31\73\34\0\11\73\3\0\1\u0377"+
    "\36\0\32\73\65\0\1\u0378\200\0\1\u0379\47\0\11\73"+
    "\23\0\1\u037a\16\0\1\u02da\31\73\57\0\1\u016f\115\0"+
    "\11\73\17\0\1\u037b\22\0\32\73\34\0\11\73\42\0"+
    "\6\73\1\u0173\23\73\34\0\11\73\42\0\24\73\1\u037c"+
    "\5\73\34\0\11\73\42\0\14\73\1\u018c\15\73\34\0"+
    "\1\73\3\u029f\5\73\26\0\1\u037d\13\0\22\73\1\213"+
    "\7\73\123\0\1\u037e\67\0\1\u037f\2\0\1\u0380\117\0"+
    "\11\73\42\0\21\73\1\u0381\10\73\34\0\11\73\42\0"+
    "\23\73\1\u0382\6\73\34\0\11\73\42\0\17\73\1\u01f1"+
    "\12\73\116\0\1\u0383\136\0\1\u0384\7\0\1\u0180\50\0"+
    "\11\73\42\0\23\73\1\u0359\6\73\34\0\11\73\42\0"+
    "\12\73\1\u0385\17\73\116\0\1\u0386\56\0\11\73\42\0"+
    "\1\u0387\31\73\34\0\11\73\42\0\13\73\1\u0388\16\73"+
    "\34\0\11\73\12\0\1\u0389\27\0\32\73\71\0\1\u0155"+
    "\103\0\11\73\42\0\1\u038a\31\73\34\0\11\73\42\0"+
    "\21\73\1\u0387\10\73\77\0\1\u038b\75\0\11\73\42\0"+
    "\23\73\1\u0246\6\73\34\0\11\73\42\0\2\73\1\u037c"+
    "\27\73\34\0\11\73\42\0\4\73\1\u038c\25\73\126\0"+
    "\1\u038d\46\0\11\73\42\0\4\73\1\u038e\25\73\34\0"+
    "\11\73\42\0\1\u038f\31\73\34\0\11\73\42\0\13\73"+
    "\1\u018c\16\73\34\0\11\73\4\0\1\u0180\2\0\1\u0180"+
    "\32\0\32\73\34\0\11\73\42\0\4\73\1\u0390\25\73"+
    "\34\0\11\73\42\0\15\73\1\u0391\14\73\131\0\1\u0277"+
    "\122\0\1\u0392\61\0\11\73\42\0\4\73\1\u0393\25\73"+
    "\124\0\1\u0394\50\0\11\73\6\0\1\u0395\33\0\32\73"+
    "\34\0\11\73\42\0\12\73\1\u018c\17\73\34\0\11\73"+
    "\42\0\4\73\1\u0396\25\73\34\0\11\73\42\0\17\73"+
    "\1\u02e7\12\73\111\0\1\u0397\63\0\11\73\42\0\10\73"+
    "\1\u0398\21\73\34\0\11\73\42\0\4\73\1\u0399\25\73"+
    "\132\0\1\207\75\0\1\u039a\105\0\11\73\42\0\16\73"+
    "\1\u039b\13\73\131\0\1\u039c\126\0\1\u039d\132\0\1\u039e"+
    "\142\0\1\u039f\157\0\1\u03a0\142\0\1\u03a1\116\0\1\u03a2"+
    "\135\0\1\u03a3\155\0\1\u03a4\131\0\1\u02a1\154\0\1\207"+
    "\131\0\1\207\52\0\11\73\11\0\1\u03a5\2\0\1\u03a6"+
    "\5\0\1\u03a7\2\0\1\u03a8\1\u03a9\13\0\32\73\34\0"+
    "\11\73\42\0\23\73\1\u03aa\6\73\67\0\1\u0104\144\0"+
    "\1\u03ab\120\0\1\u03ac\145\0\1\u03ad\135\0\1\u03ae\157\0"+
    "\1\u03af\167\0\1\u03b0\122\0\1\u0210\160\0\1\u03b1\145\0"+
    "\1\u0306\121\0\1\u03b2\125\0\2\u0104\171\0\1\u03b3\141\0"+
    "\1\u03b4\130\0\1\u03b5\147\0\1\u0104\42\0\11\73\42\0"+
    "\7\73\1\u0128\22\73\34\0\11\73\42\0\4\73\1\u0128"+
    "\25\73\34\0\11\73\42\0\4\73\1\u03b6\25\73\34\0"+
    "\11\73\42\0\14\73\1\u03b7\15\73\34\0\11\73\42\0"+
    "\12\73\1\u03b8\17\73\36\0\1\u03b9\133\0\1\u03ba\143\0"+
    "\11\73\40\0\1\u0315\1\0\32\73\34\0\11\73\42\0"+
    "\21\73\1\u03bb\10\73\133\0\1\u0164\121\0\1\u03bc\156\0"+
    "\1\u0238\42\0\11\73\42\0\4\73\1\u03bd\25\73\107\0"+
    "\1\u03be\22\0\1\u03bf\121\0\1\u03c0\144\0\1\u03c1\3\0"+
    "\1\u03bf\51\0\11\73\42\0\23\73\1\u03c2\6\73\130\0"+
    "\1\u03c3\127\0\1\u03c4\146\0\1\u03c5\140\0\1\u03c6\47\0"+
    "\11\73\42\0\23\73\1\u03c7\6\73\51\0\1\u03c8\123\0"+
    "\11\73\42\0\21\73\1\310\10\73\34\0\11\73\42\0"+
    "\1\u0248\31\73\117\0\1\u03c9\151\0\1\u02ed\44\0\11\73"+
    "\42\0\1\u03ca\31\73\34\0\11\73\42\0\4\73\1\u03cb"+
    "\25\73\34\0\11\73\42\0\22\73\1\u03cc\7\73\74\0"+
    "\1\u03cd\100\0\11\73\5\0\1\u03ce\6\0\1\u03cf\3\0"+
    "\1\u0238\1\u0322\20\0\32\73\116\0\1\u03d0\56\0\11\73"+
    "\42\0\10\73\1\u03d1\21\73\135\0\1\u03d2\112\0\1\u03d3"+
    "\22\0\1\u03d4\125\0\1\u03d5\3\0\1\u03d4\51\0\11\73"+
    "\42\0\23\73\1\u03d6\6\73\113\0\1\u03c9\61\0\11\73"+
    "\42\0\1\u03d7\31\73\34\0\11\73\6\0\1\u03d8\33\0"+
    "\32\73\56\0\1\u03d9\2\0\1\u03da\4\0\1\u0155\1\0"+
    "\1\u03db\163\0\1\u03dc\61\0\11\73\42\0\1\u03dd\31\73"+
    "\34\0\11\73\42\0\23\73\1\310\6\73\124\0\1\u03de"+
    "\157\0\1\u03df\46\0\32\u03e0\27\0\1\u03e1\14\0\1\u03e0"+
    "\107\0\1\u03e2\135\0\1\u03e3\153\0\1\207\101\0\1\u03e4"+
    "\163\0\1\u0161\154\0\1\u03e5\105\0\1\u03e6\173\0\1\u03e7"+
    "\142\0\1\u0155\60\0\1\u03e8\124\0\11\73\42\0\25\73"+
    "\1\u03e9\4\73\34\0\11\73\6\0\1\u03ea\33\0\32\73"+
    "\123\0\1\u03eb\132\0\1\u03ec\57\0\11\73\42\0\21\73"+
    "\1\u03ed\10\73\34\0\11\73\42\0\21\73\1\u03ee\10\73"+
    "\72\0\1\u02ab\127\0\1\173\113\0\11\73\42\0\4\73"+
    "\1\u029f\25\73\122\0\1\u03ef\125\0\1\u03f0\154\0\1\u03f1"+
    "\125\0\1\u03f2\64\0\11\73\42\0\2\73\1\u03f3\27\73"+
    "\34\0\11\73\25\0\1\u03f4\14\0\32\73\130\0\1\u02a1"+
    "\44\0\11\73\17\0\1\u0156\7\0\1\u03f5\3\0\2\207"+
    "\5\0\32\73\34\0\11\73\42\0\3\73\1\u03f6\26\73"+
    "\34\0\11\73\42\0\23\73\1\u03f7\6\73\34\0\11\73"+
    "\42\0\16\73\1\u03f8\13\73\130\0\1\u03f9\117\0\1\u03fa"+
    "\147\0\1\u03fb\146\0\1\u03fc\146\0\1\u03fd\125\0\1\u03fe"+
    "\72\0\1\u03ff\200\0\1\u0400\151\0\1\u0401\52\0\11\73"+
    "\6\0\1\u0395\17\0\1\u0402\13\0\32\73\125\0\1\u0403"+
    "\47\0\11\73\42\0\6\73\1\u0404\23\73\34\0\11\73"+
    "\42\0\16\73\1\u0405\13\73\34\0\11\310\42\0\32\73"+
    "\34\0\11\73\42\0\23\73\1\u03f6\6\73\115\0\1\u0406"+
    "\146\0\1\u0407\51\0\11\73\42\0\23\73\1\u0408\6\73"+
    "\113\0\1\u01cd\164\0\1\u01cd\75\0\1\u0409\136\0\1\u040a"+
    "\102\0\11\73\42\0\23\73\1\u040b\6\73\34\0\11\73"+
    "\42\0\13\73\1\u040c\16\73\122\0\1\u040d\131\0\1\u012d"+
    "\163\0\1\u040e\132\0\1\u040f\127\0\1\u0410\55\0\11\73"+
    "\42\0\23\73\1\u029f\6\73\132\0\1\u0411\130\0\1\u0412"+
    "\133\0\1\u0413\147\0\1\u012d\123\0\1\u0414\145\0\1\u0180"+
    "\60\0\11\73\23\0\1\u0415\16\0\32\73\113\0\1\u0416"+
    "\61\0\11\73\42\0\15\73\1\u018c\14\73\34\0\11\73"+
    "\42\0\13\73\1\u0390\16\73\53\0\1\u02a1\121\0\11\73"+
    "\42\0\23\73\1\u0417\6\73\61\0\1\u0418\113\0\11\73"+
    "\42\0\15\73\1\u0419\14\73\55\0\1\u041a\117\0\11\73"+
    "\11\0\1\u0180\7\0\1\u041b\17\0\1\u039c\2\73\1\u041c"+
    "\27\73\24\0\1\u0155\7\0\11\73\14\0\1\u023c\6\0"+
    "\1\u041d\16\0\32\73\34\0\11\73\12\0\1\u041e\10\0"+
    "\1\u041f\16\0\32\73\34\0\11\73\42\0\6\73\1\u0420"+
    "\23\73\130\0\1\u0421\44\0\11\73\42\0\15\73\1\u037c"+
    "\14\73\126\0\1\u0422\137\0\1\u0423\47\0\11\73\26\0"+
    "\1\u0157\13\0\32\73\116\0\1\u0424\56\0\11\73\42\0"+
    "\2\73\1\u0425\27\73\77\0\1\u01cd\75\0\11\73\42\0"+
    "\26\73\1\u01d2\3\73\132\0\1\u0180\131\0\1\u0426\52\0"+
    "\1\u0427\220\0\1\u0428\12\0\1\u0421\103\0\1\u037d\164\0"+
    "\1\u0429\151\0\1\u042a\140\0\1\u03f1\122\0\1\u042b\145\0"+
    "\1\u0277\145\0\1\u02a1\147\0\1\u0403\116\0\1\u042c\161\0"+
    "\1\u042d\42\0\11\73\42\0\1\u042e\31\73\73\0\1\u042f"+
    "\76\0\1\u0430\52\0\1\u0155\124\0\1\u0431\141\0\1\u0104"+
    "\146\0\1\u0432\150\0\1\u0433\161\0\1\u0434\140\0\1\u0104"+
    "\45\0\2\u0104\45\0\1\u0155\164\0\1\u0435\117\0\1\u0436"+
    "\65\0\11\73\42\0\15\73\1\u0119\14\73\34\0\11\73"+
    "\42\0\2\73\1\210\14\73\1\210\12\73\34\0\11\73"+
    "\27\0\1\u0437\12\0\32\73\35\0\1\u0238\137\0\11\73"+
    "\42\0\16\73\1\u0438\13\73\77\0\1\u0439\75\0\11\73"+
    "\42\0\23\73\1\u03b7\6\73\132\0\1\u043a\64\0\1\u043b"+
    "\14\0\1\u043c\204\0\1\u02ab\124\0\1\u043a\51\0\11\73"+
    "\42\0\10\73\1\u043d\21\73\117\0\1\u043e\145\0\1\143"+
    "\144\0\1\u0164\121\0\1\u043f\122\0\1\u0440\201\0\1\u0238"+
    "\40\0\11\73\42\0\13\73\1\u03b7\16\73\34\0\11\73"+
    "\32\0\1\u0441\7\0\26\73\1\u0442\3\73\34\0\11\73"+
    "\42\0\16\73\1\u0443\13\73\113\0\1\u026c\144\0\1\u023a"+
    "\145\0\1\u0444\127\0\1\u0445\61\0\11\73\42\0\15\73"+
    "\1\u0446\14\73\107\0\1\u0447\163\0\1\u0448\64\0\1\u0449"+
    "\205\0\1\u0448\51\0\11\73\27\0\1\u044a\12\0\32\73"+
    "\34\0\11\73\20\0\1\u0130\21\0\22\73\1\322\7\73"+
    "\124\0\1\u03c9\112\0\1\u0155\64\0\1\u0155\214\0\1\u0155"+
    "\24\0\1\u0277\146\0\1\u02a1\43\0\11\73\42\0\15\73"+
    "\1\u044b\14\73\113\0\1\u0155\76\0\32\u044c\27\0\1\u044d"+
    "\14\0\1\u044c\107\0\1\u044e\135\0\1\u044f\157\0\1\u0450"+
    "\64\0\1\u0451\164\0\1\u0452\170\0\1\u0453\64\0\1\311"+
    "\15\0\1\u0454\5\0\1\u0452\133\0\1\u0455\77\0\11\73"+
    "\42\0\4\73\1\310\25\73\55\0\1\u0456\12\0\1\u027d"+
    "\176\0\1\u0457\135\0\1\u0155\51\0\11\73\42\0\16\73"+
    "\1\u0458\13\73\34\0\11\73\6\0\1\u0459\33\0\32\73"+
    "\64\0\1\u045a\211\0\1\u02a1\116\0\1\u02a1\147\0\1\u03de"+
    "\52\0\11\73\42\0\23\73\1\u045b\6\73\113\0\1\u02f9"+
    "\135\0\1\u02fb\64\0\11\73\4\0\1\u045c\35\0\32\73"+
    "\34\0\11\73\4\0\1\u045d\35\0\32\73\34\0\11\73"+
    "\42\0\22\73\1\u045e\7\73\107\0\1\u045f\141\0\1\u0460"+
    "\147\0\1\u0461\155\0\1\u02a1\134\0\1\u0462\120\0\1\u02a1"+
    "\120\0\1\u0463\200\0\1\u0464\121\0\1\u0180\161\0\1\u0465"+
    "\140\0\1\u02a1\42\0\11\73\42\0\21\73\1\u0466\10\73"+
    "\34\0\11\73\42\0\15\73\1\u0467\14\73\24\0\1\u0468"+
    "\47\0\1\u0454\153\0\1\u0469\65\0\11\73\42\0\10\73"+
    "\1\u046a\21\73\51\0\1\u01cd\150\0\1\u046b\113\0\11\73"+
    "\42\0\1\u01d2\31\73\31\0\1\u046c\2\0\11\73\42\0"+
    "\32\73\117\0\1\u02f0\147\0\1\u046d\137\0\1\u046e\123\0"+
    "\1\u0180\137\0\1\u0329\3\0\1\u0343\157\0\1\u046f\132\0"+
    "\1\u0155\140\0\1\u0470\136\0\1\u0471\150\0\1\u0472\110\0"+
    "\1\u0473\72\0\11\73\42\0\23\73\1\u0474\6\73\112\0"+
    "\1\u0475\153\0\1\u0476\47\0\11\73\42\0\7\73\1\u0477"+
    "\22\73\130\0\1\u023a\64\0\1\u0478\203\0\1\u0479\55\0"+
    "\11\73\3\0\1\u047a\36\0\32\73\134\0\1\u047b\137\0"+
    "\1\u02ed\127\0\1\u047c\135\0\1\u047d\55\0\11\73\42\0"+
    "\1\u02da\31\73\107\0\1\u042c\64\0\1\u047e\220\0\1\u035a"+
    "\152\0\1\u047f\122\0\1\u0480\140\0\1\u0481\153\0\1\u02a1"+
    "\125\0\1\u0403\15\0\1\u02a1\47\0\11\73\42\0\14\73"+
    "\1\320\5\73\1\322\7\73\61\0\1\u020c\130\0\1\u0482"+
    "\161\0\1\u0483\127\0\1\u0484\215\0\1\u0485\1\u0486\66\0"+
    "\1\u0487\5\0\1\u0487\16\0\1\372\157\0\1\u0488\145\0"+
    "\2\u0104\124\0\1\u0489\51\0\11\73\42\0\16\73\1\u0119"+
    "\13\73\121\0\1\u0238\132\0\1\u02ab\150\0\1\u048a\147\0"+
    "\1\u0489\42\0\11\73\42\0\23\73\1\u048b\6\73\124\0"+
    "\1\u048c\135\0\1\u048d\74\0\1\u0238\202\0\1\u048e\55\0"+
    "\11\73\42\0\10\73\1\u048f\21\73\34\0\11\73\42\0"+
    "\15\73\1\u03b7\14\73\132\0\1\u0490\140\0\1\u0491\42\0"+
    "\11\73\42\0\3\73\1\u0492\26\73\126\0\1\u0238\125\0"+
    "\1\u0180\150\0\1\u039c\140\0\1\u0493\51\0\11\73\42\0"+
    "\2\73\1\u0310\27\73\51\0\32\u0494\27\0\1\u0495\14\0"+
    "\1\u0494\107\0\1\u0496\135\0\1\u0497\157\0\1\u0498\115\0"+
    "\1\u026a\62\0\1\336\170\0\1\u0499\12\0\1\u01f8\153\0"+
    "\1\u049a\112\0\1\u049b\12\0\1\u01e2\170\0\1\u049c\104\0"+
    "\1\u027d\74\0\1\u0155\150\0\11\73\42\0\24\73\1\u049d"+
    "\5\73\125\0\1\u049e\132\0\1\u049f\55\0\11\73\42\0"+
    "\4\73\1\u04a0\25\73\131\0\1\u04a1\1\0\1\u04a2\136\0"+
    "\1\u04a3\43\0\11\73\42\0\23\73\1\u04a4\6\73\126\0"+
    "\1\u04a5\134\0\1\u03f1\127\0\1\u04a1\12\0\1\u0155\133\0"+
    "\1\u04a6\111\0\1\u04a7\163\0\1\u04a8\164\0\1\u04a9\35\0"+
    "\11\73\42\0\1\u0253\31\73\34\0\11\73\42\0\23\73"+
    "\1\u0425\6\73\107\0\1\u04aa\163\0\1\u04ab\42\0\11\73"+
    "\42\0\2\73\1\310\27\73\66\0\1\216\130\0\1\u03a5"+
    "\204\0\1\u04ac\126\0\1\u04ad\66\0\1\u0155\217\0\1\u0448"+
    "\150\0\1\u04ae\122\0\1\u0238\102\0\1\u04af\123\0\11\73"+
    "\42\0\10\73\1\u0425\21\73\117\0\1\u04b0\151\0\1\u04b1"+
    "\44\0\11\73\42\0\10\73\1\u04b2\21\73\52\0\1\u02a1"+
    "\177\0\1\u02a1\104\0\1\u04b3\172\0\1\u04b4\156\0\1\u04ab"+
    "\147\0\1\u03de\41\0\1\u04b5\4\u0155\2\0\1\u0155\227\0"+
    "\1\u03dc\131\0\1\u04b6\144\0\1\u04b7\100\0\1\u04b8\131\0"+
    "\1\u04b9\161\0\1\u04ba\142\0\1\u0155\1\u0210\31\0\1\u0104"+
    "\105\0\1\u0155\1\u0210\126\0\1\u0104\164\0\1\u04bb\151\0"+
    "\1\u0238\142\0\1\u02ab\42\0\11\73\42\0\30\73\1\u0128"+
    "\1\73\115\0\1\u0238\112\0\1\u04bc\202\0\1\u04bd\43\0"+
    "\11\73\42\0\22\73\1\u0310\7\73\66\0\1\u04be\161\0"+
    "\1\u0229\65\0\11\73\42\0\4\73\1\u0125\25\73\130\0"+
    "\1\u02ab\126\0\1\u04bf\135\0\1\u04c0\157\0\1\u04c1\115\0"+
    "\1\u0340\155\0\1\u039c\146\0\1\u04c2\132\0\1\u0277\47\0"+
    "\1\u012d\141\0\11\73\42\0\15\73\1\u028f\14\73\122\0"+
    "\1\u04c3\147\0\1\u049a\43\0\11\73\42\0\3\73\1\u018c"+
    "\26\73\121\0\1\u02a1\151\0\1\u04c4\145\0\1\u04c5\35\0"+
    "\11\73\42\0\10\73\1\u04c6\21\73\116\0\1\u02a1\146\0"+
    "\1\u04c7\106\0\1\u04c8\161\0\1\u03a6\147\0\1\u0448\45\0"+
    "\1\u04c9\106\0\1\u04ca\132\0\1\u0180\135\0\1\u0277\103\0"+
    "\1\u046d\202\0\1\u04cb\100\0\1\u04cc\200\0\1\u04c3\131\0"+
    "\1\u0180\51\0\11\73\40\0\1\u04cd\1\0\32\73\127\0"+
    "\1\u04ce\133\0\1\u0155\52\0\1\u0155\236\0\1\u04cf\120\0"+
    "\1\u02a1\116\0\1\u04d0\136\0\1\u04d1\123\0\1\u04d2\223\0"+
    "\1\u04d3\130\0\1\u02ab\127\0\1\u0457\152\0\1\u04d4\126\0"+
    "\1\u04d5\157\0\1\u04d6\115\0\1\u03e0\162\0\1\u0155\134\0"+
    "\1\u0349\140\0\1\u02a1\136\0\1\u04d7\51\0\11\73\42\0"+
    "\2\73\1\u04d8\27\73\115\0\1\u0180\112\0\1\u04d9\161\0"+
    "\1\u04da\57\0\1\u04db\134\0\1\u04dc\171\0\1\u04dd\122\0"+
    "\1\u0180\235\0\1\u0180\42\0\1\u0155\175\0\1\u04de\142\0"+
    "\1\u0104\136\0\1\u04df\161\0\1\u04e0\117\0\1\u04e1\200\0"+
    "\1\u04e2\115\0\1\u044c\120\0\1\u04e3\105\0\11\73\22\0"+
    "\1\u04e3\17\0\32\73\100\0\1\u0155\176\0\1\u04e4\112\0"+
    "\1\u04e4\106\0\1\u04e5\101\0\1\u04e6\210\0\1\u04e7\125\0"+
    "\1\u04e8\210\0\1\u0104\127\0\1\u0447\134\0\1\u0494\145\0"+
    "\1\u04e9\7\0\1\u0155\41\0\1\u0155\232\0\1\u04ea\110\0"+
    "\1\u04eb\151\0\1\u0104\57\0\1\u04ec\235\0\1\u0155\156\0"+
    "\1\u04ed\64\0\1\u04ee\7\0\1\u0155\141\0\1\u04ef\102\0"+
    "\1\u04f0\165\0\1\u0155\140\0\1\u04f1\7\0\1\u0104\127\0"+
    "\1\u02d0\141\0\1\u0104\75\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[115915];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\3\11\1\1\2\11"+
    "\6\1\1\11\1\1\1\11\33\1\1\11\27\1\1\11"+
    "\5\1\2\11\1\1\1\11\1\1\1\11\1\0\1\11"+
    "\2\1\2\0\1\1\1\0\2\11\11\0\4\1\2\0"+
    "\4\1\3\0\4\1\3\0\11\1\1\0\1\11\6\1"+
    "\3\0\5\1\1\0\4\1\2\0\6\1\2\0\3\1"+
    "\1\0\2\1\1\0\3\1\2\0\12\1\3\0\2\1"+
    "\1\0\10\1\2\0\12\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\14\0\3\1\36\0\20\1\1\0\2\1"+
    "\2\0\15\1\6\0\33\1\5\0\1\11\1\0\1\11"+
    "\3\0\1\11\20\0\4\1\3\0\6\1\2\0\6\1"+
    "\1\0\1\11\17\1\1\0\3\1\1\0\3\1\3\0"+
    "\12\1\3\0\4\1\1\0\1\1\5\0\10\1\1\0"+
    "\3\1\1\0\11\1\1\0\2\1\1\0\1\11\1\0"+
    "\7\1\1\0\13\1\2\0\12\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\16\0\2\1\2\0"+
    "\1\11\14\0\1\11\2\0\1\11\11\0\5\11\1\0"+
    "\16\1\1\11\4\0\4\1\1\0\1\1\1\0\6\1"+
    "\1\11\3\0\1\11\1\0\6\1\1\0\12\1\1\0"+
    "\3\1\5\0\1\1\3\0\3\1\11\0\2\1\4\0"+
    "\5\1\2\0\2\1\5\0\5\1\1\0\5\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\11\1\1\1\0\7\1"+
    "\1\11\2\0\1\1\1\0\1\1\1\0\1\1\4\0"+
    "\3\1\2\0\1\1\1\0\5\1\2\0\3\1\2\0"+
    "\2\1\1\0\3\1\1\0\2\1\1\0\3\1\1\0"+
    "\7\1\1\11\2\0\1\1\1\0\6\1\1\0\2\1"+
    "\2\0\1\1\14\0\2\1\20\0\1\11\5\1\2\0"+
    "\2\1\3\0\1\1\3\0\1\1\4\0\1\1\1\0"+
    "\2\1\2\0\3\1\1\0\1\1\1\0\1\1\3\0"+
    "\1\1\1\0\2\1\2\0\2\1\2\0\2\11\1\1"+
    "\12\0\2\1\2\0\2\1\2\0\1\1\4\0\2\1"+
    "\1\0\4\1\11\0\1\1\1\0\4\1\2\0\1\1"+
    "\4\0\2\1\5\0\1\1\4\0\2\1\2\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\0\1\1\2\0\1\1\1\0\2\1\1\0\1\1"+
    "\16\0\1\1\13\0\3\1\2\0\1\1\1\0\1\1"+
    "\4\0\1\1\4\0\1\1\2\0\3\1\4\0\1\1"+
    "\4\0\2\1\5\0\1\1\1\0\1\11\1\1\10\0"+
    "\1\1\3\0\2\1\4\0\1\1\2\0\3\1\13\0"+
    "\2\1\2\0\1\1\2\0\2\1\12\0\1\1\1\0"+
    "\1\1\2\0\1\1\3\0\1\1\4\0\1\1\10\0"+
    "\1\1\11\0\1\1\4\0\1\1\4\0\2\1\2\0"+
    "\1\1\4\0\2\1\13\0\1\1\2\0\1\1\2\0"+
    "\1\1\7\0\2\1\2\0\1\1\11\0\1\1\2\0"+
    "\1\1\23\0\1\1\3\0\2\1\1\0\1\1\1\0"+
    "\1\11\10\0\1\1\2\0\1\1\3\0\1\1\15\0"+
    "\1\1\23\0\1\1\21\0\1\1\31\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TIBasicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }  // fall though
            case 1266: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 69: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 70: break;
          case 3:
            { return TIBasicTypes.CRLF;
            }
          // fall through
          case 71: break;
          case 4:
            { return TIBasicTypes.TOKEN;
            }
          // fall through
          case 72: break;
          case 5:
            { yybegin(STRING);
            }
          // fall through
          case 73: break;
          case 6:
            { return TIBasicTypes.LPAREN;
            }
          // fall through
          case 74: break;
          case 7:
            { return TIBasicTypes.RPAREN;
            }
          // fall through
          case 75: break;
          case 8:
            { return TIBasicTypes.TIMES;
            }
          // fall through
          case 76: break;
          case 9:
            { return TIBasicTypes.PLUS;
            }
          // fall through
          case 77: break;
          case 10:
            { return TIBasicTypes.COMMA;
            }
          // fall through
          case 78: break;
          case 11:
            { return TIBasicTypes.MINUS;
            }
          // fall through
          case 79: break;
          case 12:
            { return TIBasicTypes.DIVIDE;
            }
          // fall through
          case 80: break;
          case 13:
            { return TIBasicTypes.NUMBER;
            }
          // fall through
          case 81: break;
          case 14:
            { return TIBasicTypes.COLON;
            }
          // fall through
          case 82: break;
          case 15:
            { return TIBasicTypes.LT;
            }
          // fall through
          case 83: break;
          case 16:
            { return TIBasicTypes.EQ;
            }
          // fall through
          case 84: break;
          case 17:
            { return TIBasicTypes.GT;
            }
          // fall through
          case 85: break;
          case 18:
            { return TIBasicTypes.SIMPLE_VARIABLE;
            }
          // fall through
          case 86: break;
          case 19:
            { return TIBasicTypes.LBRACKET;
            }
          // fall through
          case 87: break;
          case 20:
            { return TIBasicTypes.RBRACKET;
            }
          // fall through
          case 88: break;
          case 21:
            { return TIBasicTypes.POW;
            }
          // fall through
          case 89: break;
          case 22:
            { return TIBasicTypes.LCURLY;
            }
          // fall through
          case 90: break;
          case 23:
            { return TIBasicTypes.RCURLY;
            }
          // fall through
          case 91: break;
          case 24:
            { return TIBasicTypes.NEG;
            }
          // fall through
          case 92: break;
          case 25:
            { 
            }
          // fall through
          case 93: break;
          case 26:
            { yypushback(1); yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 94: break;
          case 27:
            { yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 95: break;
          case 28:
            { return TIBasicTypes.NE;
            }
          // fall through
          case 96: break;
          case 29:
            { return TIBasicTypes.STO;
            }
          // fall through
          case 97: break;
          case 30:
            { return TIBasicTypes.COMMENT;
            }
          // fall through
          case 98: break;
          case 31:
            { return TIBasicTypes.LE;
            }
          // fall through
          case 99: break;
          case 32:
            { return TIBasicTypes.GE;
            }
          // fall through
          case 100: break;
          case 33:
            { return TIBasicTypes.WINDOW_TOKENS;
            }
          // fall through
          case 101: break;
          case 34:
            { return TIBasicTypes.IF;
            }
          // fall through
          case 102: break;
          case 35:
            { return TIBasicTypes.LIST_VARIABLE;
            }
          // fall through
          case 103: break;
          case 36:
            { return TIBasicTypes.EXPR_FUNCTIONS_WITH_ARGS;
            }
          // fall through
          case 104: break;
          case 37:
            { return TIBasicTypes.OR;
            }
          // fall through
          case 105: break;
          case 38:
            { return TIBasicTypes.MATH_VARIABLE;
            }
          // fall through
          case 106: break;
          case 39:
            { return TIBasicTypes.EQUATION_VARIABLE_4;
            }
          // fall through
          case 107: break;
          case 40:
            { yypushback(2); yybegin(YYINITIAL); return TIBasicTypes.STRING;
            }
          // fall through
          case 108: break;
          case 41:
            { return TIBasicTypes.ANS_VARIABLE;
            }
          // fall through
          case 109: break;
          case 42:
            { return TIBasicTypes.COMMAND_WITH_PARENS;
            }
          // fall through
          case 110: break;
          case 43:
            { return TIBasicTypes.COMMAND_NO_PARENS;
            }
          // fall through
          case 111: break;
          case 44:
            { return TIBasicTypes.END;
            }
          // fall through
          case 112: break;
          case 45:
            { return TIBasicTypes.FOR;
            }
          // fall through
          case 113: break;
          case 46:
            { return TIBasicTypes.LBL;
            }
          // fall through
          case 114: break;
          case 47:
            { return TIBasicTypes.COLOR_VARIABLE;
            }
          // fall through
          case 115: break;
          case 48:
            { return TIBasicTypes.MATRIX_VARIABLE;
            }
          // fall through
          case 116: break;
          case 49:
            { return TIBasicTypes.POW2;
            }
          // fall through
          case 117: break;
          case 50:
            { return TIBasicTypes.POW3;
            }
          // fall through
          case 118: break;
          case 51:
            { return TIBasicTypes.TRANSPOSE;
            }
          // fall through
          case 119: break;
          case 52:
            { return TIBasicTypes.TO_DEGREE;
            }
          // fall through
          case 120: break;
          case 53:
            { return TIBasicTypes.TO_RADIAN;
            }
          // fall through
          case 121: break;
          case 54:
            { return TIBasicTypes.AND;
            }
          // fall through
          case 122: break;
          case 55:
            { return TIBasicTypes.NCR;
            }
          // fall through
          case 123: break;
          case 56:
            { return TIBasicTypes.NPR;
            }
          // fall through
          case 124: break;
          case 57:
            { return TIBasicTypes.XOR;
            }
          // fall through
          case 125: break;
          case 58:
            { return TIBasicTypes.ELSE;
            }
          // fall through
          case 126: break;
          case 59:
            { return TIBasicTypes.GOTO;
            }
          // fall through
          case 127: break;
          case 60:
            { return TIBasicTypes.EXPR_FUNCTIONS_NO_ARGS;
            }
          // fall through
          case 128: break;
          case 61:
            { return TIBasicTypes.STRING_VARIABLE;
            }
          // fall through
          case 129: break;
          case 62:
            { return TIBasicTypes.THEN;
            }
          // fall through
          case 130: break;
          case 63:
            { return TIBasicTypes.INVERSE;
            }
          // fall through
          case 131: break;
          case 64:
            { return TIBasicTypes.EQUATION_VARIABLE_1;
            }
          // fall through
          case 132: break;
          case 65:
            { return TIBasicTypes.EQUATION_VARIABLE_3;
            }
          // fall through
          case 133: break;
          case 66:
            { return TIBasicTypes.WHILE;
            }
          // fall through
          case 134: break;
          case 67:
            { return TIBasicTypes.EQUATION_VARIABLE_2;
            }
          // fall through
          case 135: break;
          case 68:
            { return TIBasicTypes.REPEAT;
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
